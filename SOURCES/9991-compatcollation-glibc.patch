diff --git a/bits/dlfcn.h b/bits/dlfcn.h
index 7786d8f..321fc99 100644
--- a/bits/dlfcn.h
+++ b/bits/dlfcn.h
@@ -51,8 +51,12 @@
    into
         foo = DL_CALL_FCT (fctp, (arg1, arg2));
 */
+#ifdef LIBCOMPATCOLL_MODE
+# define DL_CALL_FCT(fctp, args)  ((*(fctp)) args)
+#else
 # define DL_CALL_FCT(fctp, args) \
   (_dl_mcount_wrapper_check ((void *) (fctp)), (*(fctp)) args)
+#endif /* LIBCOMPATCOLL_MODE */
 
 __BEGIN_DECLS
 
diff --git a/csu/version.c b/csu/version.c
index e0d884d..2d2b006 100644
--- a/csu/version.c
+++ b/csu/version.c
@@ -20,9 +20,31 @@
 #include <libc-abis.h>
 #include <gnu/libc-version.h>
 
+#ifdef LIBCOMPATCOLL_MODE
+static const char __libc_release[] = RELEASE " (compatcollation)";
+static const char __libc_version[] = VERSION "-" GLIBCRELEASE;
+
+/* the following copied from elf/rtld.c to support aarch64 */
+#ifndef THREAD_SET_STACK_GUARD
+/* Only exported for architectures that don't store the stack guard canary
+   in thread local area.  */
+uintptr_t __stack_chk_guard attribute_relro;
+#endif
+
+/* Only exported for architectures that don't store the pointer guard
+   value in thread local area.  */
+uintptr_t __pointer_chk_guard_local
+     attribute_relro attribute_hidden __attribute__ ((nocommon));
+#ifndef THREAD_SET_POINTER_GUARD
+strong_alias (__pointer_chk_guard_local, __pointer_chk_guard)
+#endif
+
+#else
 static const char __libc_release[] = RELEASE;
 static const char __libc_version[] = VERSION;
+#endif /* LIBCOMPATCOLL_MODE */
 
+#ifndef LIBCOMPATCOLL_MODE
 static const char banner[] =
 "GNU C Library "PKGVERSION RELEASE" release version "VERSION", by Roland McGrath et al.\n\
 Copyright (C) 2017 Free Software Foundation, Inc.\n\
@@ -45,6 +67,7 @@ __libc_print_version (void)
 {
   __write (STDOUT_FILENO, banner, sizeof banner - 1);
 }
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern const char *__gnu_get_libc_release (void);
 const char *
@@ -65,6 +88,7 @@ weak_alias (__gnu_get_libc_version, gnu_get_libc_version)
 /* This function is the entry point for the shared object.
    Running the library as a program will get here.  */
 
+#ifndef LIBCOMPATCOLL_MODE
 extern void __libc_main (void) __attribute__ ((noreturn));
 void
 __libc_main (void)
@@ -72,3 +96,4 @@ __libc_main (void)
   __libc_print_version ();
   _exit (0);
 }
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/ctype/ctype-info.c b/ctype/ctype-info.c
index bf19e3c..514fe61 100644
--- a/ctype/ctype-info.c
+++ b/ctype/ctype-info.c
@@ -24,6 +24,9 @@ __libc_tsd_define (, const int32_t *, CTYPE_TOLOWER)
 __libc_tsd_define (, const int32_t *, CTYPE_TOUPPER)
 
 
+#ifdef LIBCOMPATCOLL_MODE
+__attribute__((constructor))
+#endif /* LIBCOMPATCOLL_MODE */
 void
 __ctype_init (void)
 {
@@ -34,7 +37,9 @@ __ctype_init (void)
   const int32_t **lp = __libc_tsd_address (const int32_t *, CTYPE_TOLOWER);
   *lp = ((int32_t *) _NL_CURRENT (LC_CTYPE, _NL_CTYPE_TOLOWER) + 128);
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__ctype_init)
+#endif /* LIBCOMPATCOLL_MODE */
 
 
 #include <shlib-compat.h>
@@ -67,11 +72,13 @@ const __int32_t *__ctype_toupper = b (__int32_t, toupper, 128);
 const __uint32_t *__ctype32_tolower = b (__uint32_t, tolower, 128);
 const __uint32_t *__ctype32_toupper = b (__uint32_t, toupper, 128);
 
+#ifndef LIBCOMPATCOLL_MODE
 compat_symbol (libc, __ctype_b, __ctype_b, GLIBC_2_0);
 compat_symbol (libc, __ctype_tolower, __ctype_tolower, GLIBC_2_0);
 compat_symbol (libc, __ctype_toupper, __ctype_toupper, GLIBC_2_0);
 compat_symbol (libc, __ctype32_b, __ctype32_b, GLIBC_2_0);
 compat_symbol (libc, __ctype32_tolower, __ctype32_tolower, GLIBC_2_2);
 compat_symbol (libc, __ctype32_toupper, __ctype32_toupper, GLIBC_2_2);
+#endif /* LIBCOMPATCOLL_MODE */
 
 #endif
diff --git a/iconv/gconv_cache.c b/iconv/gconv_cache.c
index eda6cbd..934543c 100644
--- a/iconv/gconv_cache.c
+++ b/iconv/gconv_cache.c
@@ -17,6 +17,14 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __mmap(a,b,c,d,e,f)		mmap(a,b,c,d,e,f)
+#define __munmap(a,b)			munmap(a,b)
+#define __read(a,b,c)			read(a,b,c)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <dlfcn.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -30,6 +38,23 @@
 #include <iconvconfig.h>
 #include <not-cancel.h>
 
+#ifdef LIBCOMPATCOLL_MODE
+
+/* Uncancelable open.  */
+#ifdef __NR_open
+# define open_not_cancel(name, flags, mode) \
+   INLINE_SYSCALL (open, 3, name, flags, mode)
+# define open_not_cancel_2(name, flags) \
+   INLINE_SYSCALL (open, 2, name, flags)
+#else
+# define open_not_cancel(name, flags, mode) \
+   INLINE_SYSCALL (openat, 4, AT_FDCWD, name, flags, mode)
+# define open_not_cancel_2(name, flags) \
+   INLINE_SYSCALL (openat, 3, AT_FDCWD, name, flags)
+#endif
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include "../intl/hash-string.h"
 
 static void *gconv_cache;
@@ -54,7 +79,11 @@ __gconv_load_cache (void)
 
   /* We cannot use the cache if the GCONV_PATH environment variable is
      set.  */
+#ifndef LIBCOMPATCOLL_MODE
   __gconv_path_envvar = getenv ("GCONV_PATH");
+#else
+  __gconv_path_envvar = getenv ("COMPAT_GCONV_PATH");
+#endif /* LIBCOMPATCOLL_MODE */
   if (__gconv_path_envvar != NULL)
     return -1;
 
diff --git a/iconv/gconv_conf.c b/iconv/gconv_conf.c
index 5aa055d..55353f8 100644
--- a/iconv/gconv_conf.c
+++ b/iconv/gconv_conf.c
@@ -17,6 +17,15 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __tsearch(a,b,c)	tsearch(a,b,c)
+#define __tfind(a,b,c)		tfind(a,b,c)
+#define __getcwd(a,b)		getcwd(a,b)
+#define __getdelim(line, len, c, fp) getdelim (line, len, c, fp)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <ctype.h>
 #include <errno.h>
@@ -89,8 +98,10 @@ static const char builtin_aliases[] =
 #undef BUILTIN_ALIAS
 };
 
+#ifndef LIBCOMPATCOLL_MODE
 #include <libio/libioP.h>
 #define __getdelim(line, len, c, fp) _IO_getdelim (line, len, c, fp)
+#endif /* LIBCOMPATCOLL_MODE */
 
 
 /* Value of the GCONV_PATH environment variable.  */
diff --git a/iconv/gconv_db.c b/iconv/gconv_db.c
index b748467..174908a 100644
--- a/iconv/gconv_db.c
+++ b/iconv/gconv_db.c
@@ -17,6 +17,14 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __tsearch(a,b,c)        tsearch(a,b,c)
+#define __tfind(a,b,c)          tfind(a,b,c)
+#define __tdestroy(a,b)		tdestroy(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <limits.h>
 #include <search.h>
diff --git a/iconv/gconv_dl.c b/iconv/gconv_dl.c
index d7dbba9..f46c6a0 100644
--- a/iconv/gconv_dl.c
+++ b/iconv/gconv_dl.c
@@ -17,8 +17,31 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __tsearch(a,b,c)        tsearch(a,b,c)
+#define __tfind(a,b,c)          tfind(a,b,c)
+#define __twalk(a,b)		twalk(a,b)
+#define __tdestroy(a,b)		tdestroy(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <dlfcn.h>
+#ifdef LIBCOMPATCOLL_MODE
+#ifdef __libc_dlopen
+#undef __libc_dlopen
+#endif
+#define __libc_dlopen(n)        dlopen (n, RTLD_LAZY)
+#ifdef __libc_dlclose
+#undef __libc_dlclose
+#endif
+#define __libc_dlclose(h)       dlclose(h)
+#ifdef __libc_dlsym
+#undef __libc_dlsym
+#endif
+#define __libc_dlsym(h,s)       dlsym(h,s)
+#endif /* LIBCOMPATCOLL_MODE */
 #include <inttypes.h>
 #include <search.h>
 #include <stdlib.h>
diff --git a/include/assert.h b/include/assert.h
index c452667..a99bdd1 100644
--- a/include/assert.h
+++ b/include/assert.h
@@ -21,7 +21,9 @@ extern void __assert_fail_base (const char *fmt, const char *assertion,
      __THROW  __attribute__ ((__noreturn__));
 
 # if IS_IN (libc) || IS_IN (rtld)
+#ifndef LIBCOMPATCOLL_MODE
 hidden_proto (__assert_fail)
 hidden_proto (__assert_perror_fail)
+#endif /* LIBCOMPATCOLL_MODE */
 # endif
 #endif
diff --git a/include/ctype.h b/include/ctype.h
index ac6db79..9e364af 100644
--- a/include/ctype.h
+++ b/include/ctype.h
@@ -5,7 +5,9 @@
 #ifndef _ISOMAC
 /* Initialize ctype locale data.  */
 extern void __ctype_init (void);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__ctype_init)
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* ctype/ctype.h defined this as a macro and we don't want to #undef it.
    So defeat macro expansion with parens for this declaration.  */
diff --git a/include/errno.h b/include/errno.h
index 3c3d228..1e109dc 100644
--- a/include/errno.h
+++ b/include/errno.h
@@ -26,7 +26,11 @@ extern int rtld_errno attribute_hidden;
 
 #  undef  errno
 #  if IS_IN (libc)
+#ifndef LIBCOMPATCOLL_MODE
 #   define errno __libc_errno
+#else
+#   define errno errno
+#endif /* LIBCOMPATCOLL_MODE */
 #  else
 #   define errno errno		/* For #ifndef errno tests.  */
 #  endif
@@ -41,7 +45,9 @@ extern int *__errno_location (void) __THROW __attribute_const__
      attribute_hidden
 #  endif
 ;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__errno_location)
+#endif /* LIBCOMPATCOLL_MODE */
 
 #endif /* !_ISOMAC && !__ASSEMBLER__ */
 #endif /* !_ERRNO_H */
diff --git a/include/libc-symbols.h b/include/libc-symbols.h
index 5bf5770..5dfc6c4 100644
--- a/include/libc-symbols.h
+++ b/include/libc-symbols.h
@@ -518,7 +518,7 @@ for linking")
 # define hidden_nolink(name, lib, version)
 #endif
 
-#if IS_IN (libc)
+#if IS_IN (libc) /* && !defined LIBCOMPATCOLL_MODE */
 # define libc_hidden_proto(name, attrs...) hidden_proto (name, ##attrs)
 # define libc_hidden_tls_proto(name, attrs...) hidden_tls_proto (name, ##attrs)
 # define libc_hidden_def(name) hidden_def (name)
diff --git a/include/search.h b/include/search.h
index a941959..55c56c4 100644
--- a/include/search.h
+++ b/include/search.h
@@ -14,15 +14,21 @@ libc_hidden_proto (lfind)
 extern void __hdestroy (void);
 extern void *__tsearch (const void *__key, void **__rootp,
 			__compar_fn_t compar);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__tsearch)
+#endif /* LIBCOMPATCOLL_MODE */
 extern void *__tfind (const void *__key, void *const *__rootp,
 		      __compar_fn_t compar);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__tfind)
+#endif /* LIBCOMPATCOLL_MODE */
 extern void *__tdelete (const void *__key, void **__rootp,
 			__compar_fn_t compar);
 libc_hidden_proto (__tdelete)
 extern void __twalk (const void *__root, __action_fn_t action);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__twalk)
+#endif /* LIBCOMPATCOLL_MODE */
 extern void __tdestroy (void *__root, __free_fn_t freefct);
 #endif
 #endif
diff --git a/include/signal.h b/include/signal.h
index bcf1455..95b3775 100644
--- a/include/signal.h
+++ b/include/signal.h
@@ -9,7 +9,9 @@ libc_hidden_proto (sigdelset)
 libc_hidden_proto (sigismember)
 extern int __sigpause (int sig_or_mask, int is_sig);
 libc_hidden_proto (__sigpause)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (raise)
+#endif /* LIBCOMPATCOLL_MODE */
 libc_hidden_proto (__libc_current_sigrtmin)
 libc_hidden_proto (__libc_current_sigrtmax)
 libc_hidden_proto (_sys_siglist)
diff --git a/include/stdio.h b/include/stdio.h
index 1bd63bf..103f2f5 100644
--- a/include/stdio.h
+++ b/include/stdio.h
@@ -8,7 +8,9 @@ extern int __fcloseall (void);
 extern int __snprintf (char *__restrict __s, size_t __maxlen,
 		       const char *__restrict __format, ...)
      __attribute__ ((__format__ (__printf__, 3, 4)));
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__snprintf)
+#endif /* LIBCOMPATCOLL_MODE */
 extern int __vsnprintf (char *__restrict __s, size_t __maxlen,
 			const char *__restrict __format, _G_va_list __arg)
      __attribute__ ((__format__ (__printf__, 3, 0)));
@@ -139,6 +141,7 @@ libc_hidden_proto (__libc_readline_unlocked);
 extern const char *const _sys_errlist_internal[] attribute_hidden;
 extern int _sys_nerr_internal attribute_hidden;
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__asprintf)
 #  if IS_IN (libc)
 extern _IO_FILE *_IO_new_fopen (const char*, const char*);
@@ -155,10 +158,14 @@ extern int _IO_new_fsetpos (_IO_FILE *, const _IO_fpos_t *);
 extern int _IO_new_fgetpos (_IO_FILE *, _IO_fpos_t *);
 #   define fgetpos(fp, posp) _IO_new_fgetpos (fp, posp)
 #  endif
+#endif /* LIBCOMPATCOLL_MODE */
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (dprintf)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (dprintf) __dprintf
      __attribute__ ((__format__ (__printf__, 2, 3)));
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__dprintf)
 libc_hidden_proto (fprintf)
 libc_hidden_proto (vfprintf)
@@ -169,33 +176,51 @@ libc_hidden_proto (perror)
 libc_hidden_proto (remove)
 libc_hidden_proto (rewind)
 libc_hidden_proto (fileno)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (fileno) __fileno;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__fileno)
 libc_hidden_proto (fwrite)
 libc_hidden_proto (fseek)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (ftello) __ftello;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__ftello)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (fseeko64) __fseeko64;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__fseeko64)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (ftello64) __ftello64;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__ftello64)
 libc_hidden_proto (fflush)
 libc_hidden_proto (fflush_unlocked)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (fflush_unlocked) __fflush_unlocked;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__fflush_unlocked)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (fread_unlocked) __fread_unlocked;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__fread_unlocked)
 libc_hidden_proto (fwrite_unlocked)
 libc_hidden_proto (fgets_unlocked)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (fgets_unlocked) __fgets_unlocked;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__fgets_unlocked)
 libc_hidden_proto (fputs_unlocked)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (fputs_unlocked) __fputs_unlocked;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__fputs_unlocked)
 libc_hidden_proto (fmemopen)
+#endif /* LIBCOMPATCOLL_MODE */
 /* The prototype needs repeating instead of using __typeof to use
    __THROW in C++ tests.  */
 extern FILE *__open_memstream (char **, size_t *) __THROW __wur;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__open_memstream)
 libc_hidden_proto (__libc_fatal)
 rtld_hidden_proto (__libc_fatal)
@@ -205,6 +230,7 @@ libc_hidden_proto (__vfprintf_chk)
 libc_hidden_proto (__vasprintf_chk)
 libc_hidden_proto (__vdprintf_chk)
 libc_hidden_proto (__obstack_vprintf_chk)
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern FILE * __fmemopen (void *buf, size_t len, const char *mode);
 libc_hidden_proto (__fmemopen)
diff --git a/include/stdlib.h b/include/stdlib.h
index 6fd8688..43f45d2 100644
--- a/include/stdlib.h
+++ b/include/stdlib.h
@@ -16,6 +16,7 @@ extern __typeof (strtoull_l) __strtoull_l;
 extern __typeof (strtod_l) __strtod_l;
 extern __typeof (strtof_l) __strtof_l;
 extern __typeof (strtold_l) __strtold_l;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strtol_l)
 libc_hidden_proto (__strtoul_l)
 libc_hidden_proto (__strtoll_l)
@@ -27,12 +28,15 @@ libc_hidden_proto (__strtold_l)
 libc_hidden_proto (exit)
 libc_hidden_proto (abort)
 libc_hidden_proto (getenv)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (secure_getenv) __libc_secure_getenv;
 libc_hidden_proto (__libc_secure_getenv)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (bsearch)
 libc_hidden_proto (qsort)
 extern __typeof (qsort_r) __qsort_r;
 libc_hidden_proto (__qsort_r)
+#endif /* LIBCOMPATCOLL_MODE */
 libc_hidden_proto (lrand48_r)
 libc_hidden_proto (wctomb)
 
@@ -146,6 +150,7 @@ extern unsigned long long int __strtoull_internal (const char *
 						   char **__restrict __endptr,
 						   int __base, int __group)
      __THROW __nonnull ((1)) __wur;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strtof_internal)
 libc_hidden_proto (__strtod_internal)
 libc_hidden_proto (__strtold_internal)
@@ -153,6 +158,7 @@ libc_hidden_proto (__strtol_internal)
 libc_hidden_proto (__strtoll_internal)
 libc_hidden_proto (__strtoul_internal)
 libc_hidden_proto (__strtoull_internal)
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern double ____strtod_l_internal (const char *__restrict __nptr,
 				     char **__restrict __endptr, int __group,
@@ -185,6 +191,7 @@ extern unsigned long long int ____strtoull_l_internal (const char *
 						       int __base, int __group,
 						       locale_t __loc);
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (____strtof_l_internal)
 libc_hidden_proto (____strtod_l_internal)
 libc_hidden_proto (____strtold_l_internal)
@@ -200,7 +207,8 @@ libc_hidden_proto (strtol)
 libc_hidden_proto (strtoll)
 libc_hidden_proto (strtoul)
 libc_hidden_proto (strtoull)
-
+#endif /* LIBCOMPATCOLL_MODE */
+	
 extern float __strtof_nan (const char *, char **, char) internal_function;
 extern double __strtod_nan (const char *, char **, char) internal_function;
 extern long double __strtold_nan (const char *, char **, char)
@@ -212,12 +220,14 @@ extern double __wcstod_nan (const wchar_t *, wchar_t **, wchar_t)
 extern long double __wcstold_nan (const wchar_t *, wchar_t **, wchar_t)
      internal_function;
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strtof_nan)
 libc_hidden_proto (__strtod_nan)
 libc_hidden_proto (__strtold_nan)
 libc_hidden_proto (__wcstof_nan)
 libc_hidden_proto (__wcstod_nan)
 libc_hidden_proto (__wcstold_nan)
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* Enable _FloatN bits as needed.  */
 #include <bits/floatn.h>
@@ -225,27 +235,35 @@ libc_hidden_proto (__wcstold_nan)
 #if __HAVE_DISTINCT_FLOAT128
 extern __typeof (strtof128_l) __strtof128_l;
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strtof128_l)
 libc_hidden_proto (strtof128)
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern _Float128 __strtof128_nan (const char *, char **, char)
      internal_function;
 extern _Float128 __wcstof128_nan (const wchar_t *, wchar_t **, wchar_t)
      internal_function;
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strtof128_nan)
 libc_hidden_proto (__wcstof128_nan)
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern _Float128 __strtof128_internal (const char *__restrict __nptr,
 				       char **__restrict __endptr,
 				       int __group);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strtof128_internal)
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern _Float128 ____strtof128_l_internal (const char *__restrict __nptr,
 					   char **__restrict __endptr,
 					   int __group, locale_t __loc);
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (____strtof128_l_internal)
+#endif /* LIBCOMPATCOLL_MODE */
 #endif
 
 extern char *__ecvt (double __value, int __ndigit, int *__restrict __decpt,
@@ -277,7 +295,9 @@ extern int __qfcvt_r (long double __value, int __ndigit,
 # endif
 
 extern void *__default_morecore (ptrdiff_t) __THROW;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__default_morecore)
+#endif /* LIBCOMPATCOLL_MODE */
 
 struct abort_msg_s
 {
@@ -285,7 +305,9 @@ struct abort_msg_s
   char msg[0];
 };
 extern struct abort_msg_s *__abort_msg;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__abort_msg)
+#endif /* LIBCOMPATCOLL_MODE */
 
 # if IS_IN (rtld)
 extern __typeof (unsetenv) unsetenv attribute_hidden;
diff --git a/include/string.h b/include/string.h
index 069efd0..d578df9 100644
--- a/include/string.h
+++ b/include/string.h
@@ -64,6 +64,7 @@ extern __typeof (strncasecmp_l) __strncasecmp_l;
 /* Alternative version which doesn't pollute glibc's namespace.  */
 #if IS_IN (libc)
 # undef strndupa
+#ifndef LIBCOMPATCOLL_MODE
 # define strndupa(s, n)							      \
   (__extension__							      \
     ({									      \
@@ -73,8 +74,20 @@ extern __typeof (strncasecmp_l) __strncasecmp_l;
       __new[__len] = '\0';						      \
       (char *) memcpy (__new, __old, __len);				      \
     }))
-#endif
+#else
+# define strndupa(s, n)							      \
+  (__extension__							      \
+    ({									      \
+      const char *__old = (s);						      \
+      size_t __len = strnlen (__old, (n));				      \
+      char *__new = (char *) __builtin_alloca (__len + 1);		      \
+      __new[__len] = '\0';						      \
+      (char *) memcpy (__new, __old, __len);				      \
+    }))
+#endif /* LIBCOMPATCOLL_MODE */
+#endif /* IS_IN (libc) */
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__mempcpy)
 #ifndef __NO_STRING_INLINES
 # define __mempcpy(dest, src, n) __builtin_mempcpy (dest, src, n)
@@ -92,23 +105,32 @@ extern __typeof (strncat) __strncat;
 libc_hidden_proto (__strncat)
 libc_hidden_proto (__strdup)
 libc_hidden_proto (__strndup)
+#endif /* LIBCOMPATCOLL_MODE */
 libc_hidden_proto (__strerror_r)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strverscmp)
 libc_hidden_proto (basename)
+#endif /* LIBCOMPATCOLL_MODE */
 extern char *__basename (const char *__filename) __THROW __nonnull ((1));
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__basename)
 libc_hidden_proto (strcoll)
 libc_hidden_proto (__strcoll_l)
 libc_hidden_proto (__strxfrm_l)
 libc_hidden_proto (__strtok_r)
+#endif /* LIBCOMPATCOLL_MODE */
 extern char *__strsep_g (char **__stringp, const char *__delim);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strsep_g)
 libc_hidden_proto (strnlen)
 libc_hidden_proto (__strnlen)
 libc_hidden_proto (memmem)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (memmem) __memmem;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__memmem)
 libc_hidden_proto (__ffs)
+#endif /* LIBCOMPATCOLL_MODE */
 
 #if IS_IN (libc)
 /* Avoid hidden reference to IFUNC symbol __explicit_bzero_chk.  */
@@ -121,6 +143,7 @@ void __explicit_bzero_chk (void *, size_t, size_t) __THROW __nonnull ((1));
 # define explicit_bzero(buf, len) __explicit_bzero_chk (buf, len, __bos0 (buf))
 #endif
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_builtin_proto (memchr)
 libc_hidden_builtin_proto (memcpy)
 libc_hidden_builtin_proto (mempcpy)
@@ -141,6 +164,7 @@ libc_hidden_builtin_proto (strrchr)
 libc_hidden_builtin_proto (strspn)
 libc_hidden_builtin_proto (strstr)
 libc_hidden_builtin_proto (ffs)
+#endif /* LIBCOMPATCOLL_MODE */
 
 #if IS_IN (rtld)
 extern __typeof (__stpcpy) __stpcpy attribute_hidden;
diff --git a/include/sys/mman.h b/include/sys/mman.h
index 8b996fc..ef443e4 100644
--- a/include/sys/mman.h
+++ b/include/sys/mman.h
@@ -5,12 +5,18 @@
 /* Now define the internal interfaces.  */
 extern void *__mmap (void *__addr, size_t __len, int __prot,
 		     int __flags, int __fd, __off_t __offset);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__mmap)
+#endif /* LIBCOMPATCOLL_MODE */
 extern void *__mmap64 (void *__addr, size_t __len, int __prot,
 		       int __flags, int __fd, __off64_t __offset);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__mmap64)
+#endif /* LIBCOMPATCOLL_MODE */
 extern int __munmap (void *__addr, size_t __len);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__munmap)
+#endif /* LIBCOMPATCOLL_MODE */
 extern int __mprotect (void *__addr, size_t __len, int __prot);
 libc_hidden_proto (__mprotect)
 
diff --git a/include/sys/stat.h b/include/sys/stat.h
index 4f31c00..ac84697 100644
--- a/include/sys/stat.h
+++ b/include/sys/stat.h
@@ -14,7 +14,9 @@ extern int __mknod (const char *__path,
 		    __mode_t __mode, __dev_t __dev);
 #if IS_IN (libc) || IS_IN (rtld)
 hidden_proto (__fxstat)
+#ifndef LIBCOMPATCOLL_MODE
 hidden_proto (__fxstat64)
+#endif /* LIBCOMPATCOLL_MODE */
 hidden_proto (__lxstat)
 hidden_proto (__lxstat64)
 hidden_proto (__xstat)
diff --git a/include/time.h b/include/time.h
index 9956b82..9084d40 100644
--- a/include/time.h
+++ b/include/time.h
@@ -5,16 +5,24 @@
 # include <bits/types/locale_t.h>
 
 extern __typeof (strftime_l) __strftime_l;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strftime_l)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (strptime_l) __strptime_l;
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (time)
+#endif /* LIBCOMPATCOLL_MODE */
 libc_hidden_proto (asctime)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (mktime)
 libc_hidden_proto (timelocal)
 libc_hidden_proto (localtime)
+#endif /* LIBCOMPATCOLL_MODE */
 libc_hidden_proto (strftime)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (strptime)
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern __typeof (clock_getres) __clock_getres;
 extern __typeof (clock_gettime) __clock_gettime;
@@ -55,8 +63,14 @@ extern time_t __mktime_internal (struct tm *__tp,
 				 struct tm *(*__func) (const time_t *,
 						       struct tm *),
 				 time_t *__offset);
+#ifndef LIBCOMPATCOLL_MODE
 extern struct tm *__localtime_r (const time_t *__timer,
 				 struct tm *__tp) attribute_hidden;
+#else
+extern struct tm *__localtime_r (const time_t *__timer,
+                                 struct tm *__tp);
+#endif /* LIBCOMPATCOLL_MODE */
+
 
 extern struct tm *__gmtime_r (const time_t *__restrict __timer,
 			      struct tm *__restrict __tp);
diff --git a/include/unistd.h b/include/unistd.h
index 7f1c2cc..d3ffa1a 100644
--- a/include/unistd.h
+++ b/include/unistd.h
@@ -3,8 +3,10 @@
 
 # ifndef _ISOMAC
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (_exit, __noreturn__)
 rtld_hidden_proto (_exit, __noreturn__)
+#endif /* LIBCOMPATCOLL_MODE */
 libc_hidden_proto (alarm)
 libc_hidden_proto (confstr)
 libc_hidden_proto (execl)
@@ -52,10 +54,14 @@ extern ssize_t __libc_pwrite64 (int __fd, const void *__buf, size_t __n,
 				__off64_t __offset) attribute_hidden;
 extern ssize_t __libc_read (int __fd, void *__buf, size_t __n);
 libc_hidden_proto (__libc_read)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (read)
+#endif /* LIBCOMPATCOLL_MODE */
 extern ssize_t __libc_write (int __fd, const void *__buf, size_t __n);
 libc_hidden_proto (__libc_write)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (write)
+#endif /* LIBCOMPATCOLL_MODE */
 extern int __pipe (int __pipedes[2]);
 libc_hidden_proto (__pipe)
 extern int __pipe2 (int __pipedes[2], int __flags);
@@ -95,7 +101,9 @@ extern int __execve (const char *__path, char *const __argv[],
 extern long int __pathconf (const char *__path, int __name);
 extern long int __fpathconf (int __fd, int __name);
 extern long int __sysconf (int __name);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__sysconf)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __pid_t __getpid (void);
 libc_hidden_proto (__getpid)
 extern __pid_t __getppid (void);
@@ -138,9 +146,13 @@ extern int __close (int __fd);
 libc_hidden_proto (__close)
 extern int __libc_close (int __fd);
 extern ssize_t __read (int __fd, void *__buf, size_t __nbytes);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__read)
+#endif /* LIBCOMPATCOLL_MODE */
 extern ssize_t __write (int __fd, const void *__buf, size_t __n);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__write)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __pid_t __fork (void);
 libc_hidden_proto (__fork)
 extern int __getpagesize (void) __attribute__ ((__const__));
diff --git a/include/wchar.h b/include/wchar.h
index 7bf042c..94e0265 100644
--- a/include/wchar.h
+++ b/include/wchar.h
@@ -16,6 +16,7 @@ extern __typeof (wcstod_l) __wcstod_l;
 extern __typeof (wcstof_l) __wcstof_l;
 extern __typeof (wcstold_l) __wcstold_l;
 extern __typeof (wcsftime_l) __wcsftime_l;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__wcstol_l)
 libc_hidden_proto (__wcstoul_l)
 libc_hidden_proto (__wcstoll_l)
@@ -24,7 +25,7 @@ libc_hidden_proto (__wcstod_l)
 libc_hidden_proto (__wcstof_l)
 libc_hidden_proto (__wcstold_l)
 libc_hidden_proto (__wcsftime_l)
-
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern double __wcstod_internal (const wchar_t *__restrict __nptr,
 				 wchar_t **__restrict __endptr, int __group)
@@ -55,6 +56,7 @@ extern unsigned long long int __wcstoull_internal (const wchar_t *
 extern unsigned long long int ____wcstoull_l_internal (const wchar_t *,
 						       wchar_t **, int, int,
 						       locale_t);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__wcstof_internal)
 libc_hidden_proto (__wcstod_internal)
 libc_hidden_proto (__wcstold_internal)
@@ -69,6 +71,7 @@ libc_hidden_proto (wcstol)
 libc_hidden_proto (wcstoll)
 libc_hidden_proto (wcstoul)
 libc_hidden_proto (wcstoull)
+#endif /* LIBCOMPATCOLL_MODE */
 
 #if __HAVE_DISTINCT_FLOAT128
 extern __typeof (wcstof128_l) __wcstof128_l;
@@ -81,6 +84,7 @@ libc_hidden_proto (__wcstof128_internal)
 libc_hidden_proto (wcstof128)
 #endif
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__wcscasecmp_l)
 libc_hidden_proto (__wcsncasecmp_l)
 
@@ -95,12 +99,15 @@ libc_hidden_proto (vswscanf)
 
 libc_hidden_proto (mbrtowc)
 libc_hidden_proto (wcrtomb)
+#endif /* LIBCOMPATCOLL_MODE */
 extern int __wcscmp (const wchar_t *__s1, const wchar_t *__s2)
      __THROW __attribute_pure__;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__wcscmp)
 libc_hidden_proto (wcsftime)
 libc_hidden_proto (wcsspn)
 libc_hidden_proto (wcschr)
+#endif /* LIBCOMPATCOLL_MODE */
 /* The C++ overloading of wcschr means we have to repeat the type to
    declare __wcschr instead of using typeof, to avoid errors in C++
    tests; in addition, __THROW cannot be used with a function type
@@ -108,18 +115,24 @@ libc_hidden_proto (wcschr)
    __THROW, to __wcscmp and __wcscoll.  */
 extern wchar_t *__wcschr (const wchar_t *__wcs, wchar_t __wc)
      __THROW __attribute_pure__;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__wcschr)
+#endif /* LIBCOMPATCOLL_MODE */
 extern int __wcscoll (const wchar_t *__s1, const wchar_t *__s2) __THROW;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__wcscoll)
 libc_hidden_proto (wcspbrk)
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern __typeof (wmemset) __wmemset;
 extern wchar_t *__wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)
      __THROW __attribute_pure__;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (wmemchr)
 libc_hidden_proto (__wmemchr)
 libc_hidden_proto (wmemset)
 libc_hidden_proto (__wmemset)
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* Now define the internal interfaces.  */
 extern int __wcscasecmp (const wchar_t *__s1, const wchar_t *__s2)
@@ -136,8 +149,10 @@ extern int __mbsinit (const __mbstate_t *__ps);
 extern size_t __mbrtowc (wchar_t *__restrict __pwc,
 			 const char *__restrict __s, size_t __n,
 			 __mbstate_t *__restrict __p);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__mbrtowc)
 libc_hidden_proto (__mbrlen)
+#endif /* LIBCOMPATCOLL_MODE */
 extern size_t __wcrtomb (char *__restrict __s, wchar_t __wc,
 			 __mbstate_t *__restrict __ps);
 extern size_t __mbsrtowcs (wchar_t *__restrict __dst,
diff --git a/intl/dcigettext.c b/intl/dcigettext.c
index 29a47cc..f39de1c 100644
--- a/intl/dcigettext.c
+++ b/intl/dcigettext.c
@@ -14,6 +14,15 @@
    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __tfind(a,b,c)          tfind(a,b,c)
+#define __tdestroy(a,b)		tdestroy(a,b)
+#define __getcwd(a,b)           getcwd(a,b)
+int __libc_enable_secure = 1;
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 /* Tell glibc's <string.h> to provide a prototype for mempcpy().
    This must come before <config.h> because <config.h> may include
    <features.h>, and once <features.h> has been included, it's too late.  */
@@ -28,7 +37,9 @@
 #include <sys/types.h>
 
 #ifdef __GNUC__
+#ifndef LIBCOMPATCOLL_MODE
 # define alloca __builtin_alloca
+#endif /* LIBCOMPATCOLL_MODE */
 # define HAVE_ALLOCA 1
 #else
 # ifdef _MSC_VER
@@ -128,6 +139,7 @@ extern int errno;
 
 /* @@ end of prolog @@ */
 
+#ifndef LIBCOMPATCOLL_MODE
 #ifdef _LIBC
 /* Rename the non ANSI C functions.  This is required by the standard
    because some ANSI C functions will require linking with this object
@@ -156,6 +168,7 @@ static char *stpcpy (char *dest, const char *src);
 static void *mempcpy (void *dest, const void *src, size_t n);
 # endif
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* Use a replacement if the system does not provide the `tsearch' function
    family.  */
@@ -169,9 +182,11 @@ static void *mempcpy (void *dest, const void *src, size_t n);
 # include "tsearch.h"
 #endif
 
+#ifndef LIBCOMPATCOLL_MODE
 #ifdef _LIBC
 # define tsearch __tsearch
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* Amount to increase buffer size by in each try.  */
 #define PATH_INCR 32
diff --git a/intl/loadmsgcat.c b/intl/loadmsgcat.c
index c2ff64e..8056ae9 100644
--- a/intl/loadmsgcat.c
+++ b/intl/loadmsgcat.c
@@ -81,6 +81,23 @@
 # define PRI_MACROS_BROKEN 0
 #endif
 
+#ifdef LIBCOMPATCOLL_MODE
+
+/* Uncancelable open.  */
+#ifdef __NR_open
+# define open_not_cancel(name, flags, mode) \
+   INLINE_SYSCALL (open, 3, name, flags, mode)
+# define open_not_cancel_2(name, flags) \
+   INLINE_SYSCALL (open, 2, name, flags)
+#else
+# define open_not_cancel(name, flags, mode) \
+   INLINE_SYSCALL (openat, 4, AT_FDCWD, name, flags, mode)
+# define open_not_cancel_2(name, flags) \
+   INLINE_SYSCALL (openat, 3, AT_FDCWD, name, flags)
+#endif
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 /* Provide fallback values for macros that ought to be defined in <inttypes.h>.
    Note that our fallback values need not be literal strings, because we don't
    use them with preprocessor string concatenation.  */
@@ -441,6 +458,7 @@
 
 /* @@ end of prolog @@ */
 
+#ifndef LIBCOMPATCOLL_MODE
 #ifdef _LIBC
 /* Rename the non ISO C functions.  This is required by the standard
    because some ISO C functions will require linking with this object
@@ -452,6 +470,7 @@
   __mmap (addr, len, prot, flags, fd, offset)
 # define munmap(addr, len)	__munmap (addr, len)
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* For systems that distinguish between text and binary I/O.
    O_BINARY is usually declared in <fcntl.h>. */
diff --git a/intl/localealias.c b/intl/localealias.c
index 9921aa2..4ef233b 100644
--- a/intl/localealias.c
+++ b/intl/localealias.c
@@ -95,8 +95,12 @@ char *alloca ();
 /* Some optimizations for glibc.  */
 #ifdef _LIBC
 # define FEOF(fp)		feof_unlocked (fp)
+#ifndef LIBCOMPATCOLL_MODE
 # define FGETS(buf, n, fp)	__fgets_unlocked (buf, n, fp)
 #else
+# define FGETS(buf, n, fp)      fgets_unlocked (buf, n, fp)
+#endif /* LIBCOMPATCOLL_MODE */
+#else
 # define FEOF(fp)		feof (fp)
 # define FGETS(buf, n, fp)	fgets (buf, n, fp)
 #endif
diff --git a/locale/findlocale.c b/locale/findlocale.c
index 02a97ac..8dd82f6 100644
--- a/locale/findlocale.c
+++ b/locale/findlocale.c
@@ -16,6 +16,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __memmem(a,b,c,d)	memmem(a,b,c,d)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <errno.h>
 #include <locale.h>
diff --git a/locale/loadarchive.c b/locale/loadarchive.c
index e6e1a05..c4ded3a 100644
--- a/locale/loadarchive.c
+++ b/locale/loadarchive.c
@@ -16,6 +16,15 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __mmap64(a,b,c,d,e,f)	mmap64(a,b,c,d,e,f)
+#define __munmap(a,b)		munmap(a,b)
+#define __sysconf(a)		sysconf(a)
+#define __strchrnul(a,b)	strchrnul(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <locale.h>
 #include <stddef.h>
 #include <stdlib.h>
@@ -34,6 +43,23 @@
 #include "locarchive.h"
 #include <not-cancel.h>
 
+#ifdef LIBCOMPATCOLL_MODE
+
+/* Uncancelable open.  */
+#ifdef __NR_open
+# define open_not_cancel(name, flags, mode) \
+   INLINE_SYSCALL (open, 3, name, flags, mode)
+# define open_not_cancel_2(name, flags) \
+   INLINE_SYSCALL (open, 2, name, flags)
+#else
+# define open_not_cancel(name, flags, mode) \
+   INLINE_SYSCALL (openat, 4, AT_FDCWD, name, flags, mode)
+# define open_not_cancel_2(name, flags) \
+   INLINE_SYSCALL (openat, 3, AT_FDCWD, name, flags)
+#endif
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 /* Define the hash function.  We define the function as static inline.  */
 #define compute_hashval static inline compute_hashval
 #define hashval_t uint32_t
diff --git a/locale/loadlocale.c b/locale/loadlocale.c
index e562d99..990a189 100644
--- a/locale/loadlocale.c
+++ b/locale/loadlocale.c
@@ -17,6 +17,13 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __mmap(a,b,c,d,e,f)             mmap(a,b,c,d,e,f)
+#define __munmap(a,b)                   munmap(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -32,6 +39,22 @@
 #include <not-cancel.h>
 #include "localeinfo.h"
 
+#ifdef LIBCOMPATCOLL_MODE
+
+/* Uncancelable open.  */
+#ifdef __NR_open
+# define open_not_cancel(name, flags, mode) \
+   INLINE_SYSCALL (open, 3, name, flags, mode)
+# define open_not_cancel_2(name, flags) \
+   INLINE_SYSCALL (open, 2, name, flags)
+#else
+# define open_not_cancel(name, flags, mode) \
+   INLINE_SYSCALL (openat, 4, AT_FDCWD, name, flags, mode)
+# define open_not_cancel_2(name, flags) \
+   INLINE_SYSCALL (openat, 3, AT_FDCWD, name, flags)
+#endif
+
+#endif /* LIBCOMPATCOLL_MODE */
 
 static const size_t _nl_category_num_items[] =
 {
diff --git a/locale/localeconv.c b/locale/localeconv.c
index b7800c9..7d113ae 100644
--- a/locale/localeconv.c
+++ b/locale/localeconv.c
@@ -65,8 +65,12 @@ __localeconv (void)
   return &result;
 }
 
+#ifdef LIBCOMPATCOLL_MODE
+weak_alias (__localeconv, localeconv)
+#else
 versioned_symbol (libc, __localeconv, localeconv, GLIBC_2_2);
 #if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_2)
 strong_alias (__localeconv, __localeconv20)
 compat_symbol (libc, __localeconv20, localeconv, GLIBC_2_0);
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/locale/newlocale.c b/locale/newlocale.c
index 828d715..fde665d 100644
--- a/locale/newlocale.c
+++ b/locale/newlocale.c
@@ -102,7 +102,11 @@ __newlocale (int category_mask, const char *locale, locale_t base)
   locale_path = NULL;
   locale_path_len = 0;
 
+#ifndef LIBCOMPATCOLL_MODE  
   locpath_var = getenv ("LOCPATH");
+#else
+  locpath_var = getenv ("COMPAT_LOCPATH");
+#endif /* LIBCOMPATCOLL_MODE */
   if (locpath_var != NULL && locpath_var[0] != '\0')
     {
       if (__argz_create_sep (locpath_var, ':',
diff --git a/locale/setlocale.c b/locale/setlocale.c
index 19acc4b..dacc474 100644
--- a/locale/setlocale.c
+++ b/locale/setlocale.c
@@ -251,7 +251,11 @@ setlocale (int category, const char *locale)
   locale_path = NULL;
   locale_path_len = 0;
 
+#ifndef LIBCOMPATCOLL_MODE
   locpath_var = getenv ("LOCPATH");
+#else
+  locpath_var = getenv ("COMPAT_LOCPATH");
+#endif /* LIBCOMPATCOLL_MODE */
   if (locpath_var != NULL && locpath_var[0] != '\0')
     {
       if (__argz_create_sep (locpath_var, ':',
diff --git a/stdlib/strtod.c b/stdlib/strtod.c
index 2ac1b2e..87117dd 100644
--- a/stdlib/strtod.c
+++ b/stdlib/strtod.c
@@ -51,7 +51,9 @@ INTERNAL (STRTOF) (const STRING_TYPE *nptr, STRING_TYPE **endptr, int group)
   return INTERNAL(STRTOF_L) (nptr, endptr, group, _NL_CURRENT_LOCALE);
 }
 #if defined _LIBC
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (INTERNAL (STRTOF))
+#endif /* LIBCOMPATCOLL_MODE */
 #endif
 
 
@@ -64,7 +66,9 @@ STRTOF (const STRING_TYPE *nptr, STRING_TYPE **endptr)
   return INTERNAL(STRTOF_L) (nptr, endptr, 0, _NL_CURRENT_LOCALE);
 }
 #if defined _LIBC
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (STRTOF)
+#endif /* LIBCOMPATCOLL_MODE */
 #endif
 
 #ifdef LONG_DOUBLE_COMPAT
diff --git a/stdlib/strtod_l.c b/stdlib/strtod_l.c
index 9fc9e4c..d823c7f 100644
--- a/stdlib/strtod_l.c
+++ b/stdlib/strtod_l.c
@@ -1749,7 +1749,9 @@ ____STRTOF_INTERNAL (const STRING_TYPE *nptr, STRING_TYPE **endptr, int group,
   /* NOTREACHED */
 }
 #if defined _LIBC && !defined USE_WIDE_CHAR
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (____STRTOF_INTERNAL)
+#endif /* LIBCOMPATCOLL_MODE */
 #endif
 
 /* External user entry point.  */
@@ -1762,10 +1764,12 @@ __STRTOF (const STRING_TYPE *nptr, STRING_TYPE **endptr, locale_t loc)
 {
   return ____STRTOF_INTERNAL (nptr, endptr, 0, loc);
 }
+#ifndef LIBCOMPATCOLL_MODE
 #if defined _LIBC
 libc_hidden_def (__STRTOF)
 libc_hidden_ver (__STRTOF, STRTOF)
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
 weak_alias (__STRTOF, STRTOF)
 
 #ifdef LONG_DOUBLE_COMPAT
diff --git a/stdlib/strtod_nan_main.c b/stdlib/strtod_nan_main.c
index 96b788c..405de37 100644
--- a/stdlib/strtod_nan_main.c
+++ b/stdlib/strtod_nan_main.c
@@ -60,4 +60,6 @@ STRTOD_NAN (const STRING_TYPE *str, STRING_TYPE **endptr, STRING_TYPE endc)
     *endptr = (STRING_TYPE *) cp;
   return retval;
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (STRTOD_NAN)
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/stdlib/strtol.c b/stdlib/strtol.c
index d1e3bfe..e585ff6 100644
--- a/stdlib/strtol.c
+++ b/stdlib/strtol.c
@@ -97,7 +97,9 @@ INTERNAL (strtol) (const STRING_TYPE *nptr, STRING_TYPE **endptr,
 {
   return INTERNAL (__strtol_l) (nptr, endptr, base, group, _NL_CURRENT_LOCALE);
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (INTERNAL (strtol))
+#endif /* LIBCOMPATCOLL_MODE */
 
 
 INT
@@ -106,4 +108,6 @@ __strtol (const STRING_TYPE *nptr, STRING_TYPE **endptr, int base)
   return INTERNAL (__strtol_l) (nptr, endptr, base, 0, _NL_CURRENT_LOCALE);
 }
 weak_alias (__strtol, strtol)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_weak (strtol)
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/stdlib/strtol_l.c b/stdlib/strtol_l.c
index 28ea4bc..154f3d9 100644
--- a/stdlib/strtol_l.c
+++ b/stdlib/strtol_l.c
@@ -524,7 +524,9 @@ noconv:
   return 0L;
 }
 #if defined _LIBC && !defined USE_WIDE_CHAR
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (INTERNAL (__strtol_l))
+#endif /* LIBCOMPATCOLL_MODE */
 #endif
 
 /* External user entry point.  */
@@ -546,5 +548,7 @@ __strtol_l (const STRING_TYPE *nptr, STRING_TYPE **endptr,
 {
   return INTERNAL (__strtol_l) (nptr, endptr, base, 0, loc);
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__strtol_l)
+#endif /* LIBCOMPATCOLL_MODE */
 weak_alias (__strtol_l, strtol_l)
diff --git a/string/argz-stringify.c b/string/argz-stringify.c
index 5499264..323a7f6 100644
--- a/string/argz-stringify.c
+++ b/string/argz-stringify.c
@@ -17,6 +17,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __strnlen(a,n)		strnlen(a,n)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <argz.h>
 #include <string.h>
 
diff --git a/string/strcoll.c b/string/strcoll.c
index 8996bf9..1ac317b 100644
--- a/string/strcoll.c
+++ b/string/strcoll.c
@@ -34,6 +34,8 @@ STRCOLL (const STRING_TYPE *s1, const STRING_TYPE *s2)
   return STRCOLL_L (s1, s2, _NL_CURRENT_LOCALE);
 }
 
+#ifndef LIBCOMPATCOLL_MODE
 #ifdef USE_HIDDEN_DEF
 libc_hidden_def (STRCOLL)
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/string/strcoll_l.c b/string/strcoll_l.c
index e1aaa60..c6ba4b7 100644
--- a/string/strcoll_l.c
+++ b/string/strcoll_l.c
@@ -16,6 +16,11 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wcslen(s)             wcslen(s)
+
+#endif /* LIBCOMPATCOLL_MODE */
 
 #include <assert.h>
 #include <langinfo.h>
@@ -647,7 +652,9 @@ STRCOLL (const STRING_TYPE *s1, const STRING_TYPE *s2, locale_t l)
 
   return result;
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (STRCOLL)
+#endif /* LIBCOMPATCOLL_MODE */
 
 #ifndef WIDE_CHAR_VERSION
 weak_alias (__strcoll_l, strcoll_l)
diff --git a/string/strxfrm_l.c b/string/strxfrm_l.c
index 7e04bfc..c9d29c6 100644
--- a/string/strxfrm_l.c
+++ b/string/strxfrm_l.c
@@ -16,6 +16,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wcslen(s)             wcslen(s)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <langinfo.h>
 #include <locale.h>
@@ -740,7 +746,9 @@ STRXFRM (STRING_TYPE *dest, const STRING_TYPE *src, size_t n, locale_t l)
   else
     return do_xfrm (usrc, dest, n, &l_data);
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (STRXFRM)
+#endif /* LIBCOMPATCOLL_MODE */
 
 #ifndef WIDE_CHAR_VERSION
 weak_alias (__strxfrm_l, strxfrm_l)
diff --git a/sysdeps/generic/symbol-hacks.h b/sysdeps/generic/symbol-hacks.h
index d614c09..ef064ff 100644
--- a/sysdeps/generic/symbol-hacks.h
+++ b/sysdeps/generic/symbol-hacks.h
@@ -1,9 +1,11 @@
 /* Some compiler optimizations may transform loops into memset/memmove
    calls and without proper declaration it may generate PLT calls.  */
 #if !defined __ASSEMBLER__ && IS_IN (libc) && defined SHARED
+#ifndef LIBCOMPATCOLL_MODE
 asm ("memmove = __GI_memmove");
 asm ("memset = __GI_memset");
 asm ("memcpy = __GI_memcpy");
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* Some targets do not use __stack_chk_fail_local.  In libc.so,
    redirect __stack_chk_fail to a hidden reference
@@ -11,9 +13,12 @@ asm ("memcpy = __GI_memcpy");
    __stack_chk_fail itself is a global symbol, exported from libc.so,
    and cannot be made hidden.  */
 
+#ifndef LIBCOMPATCOLL_MODE
 # if IS_IN (libc) && defined SHARED && \
   defined STACK_PROTECTOR_LEVEL && STACK_PROTECTOR_LEVEL > 0
 asm (".hidden __stack_chk_fail_local\n"
      "__stack_chk_fail = __stack_chk_fail_local");
 # endif
+#endif /* LIBCOMPATCOLL_MODE */
+
 #endif
diff --git a/sysdeps/generic/unsecvars.h b/sysdeps/generic/unsecvars.h
index 5ea8a4a..310367a 100644
--- a/sysdeps/generic/unsecvars.h
+++ b/sysdeps/generic/unsecvars.h
@@ -9,6 +9,7 @@
    with a '\0' explicitly.  */
 #define UNSECURE_ENVVARS \
   "GCONV_PATH\0"							      \
+  "COMPAT_GCONV_PATH\0"							      \
   "GETCONF_DIR\0"							      \
   GLIBC_TUNABLES_ENVVAR							      \
   "HOSTALIASES\0"							      \
@@ -25,6 +26,7 @@
   "LD_USE_LOAD_BIAS\0"							      \
   "LOCALDOMAIN\0"							      \
   "LOCPATH\0"								      \
+  "COMPAT_LOCPATH\0"                                                          \
   "MALLOC_TRACE\0"							      \
   "NIS_PATH\0"								      \
   "NLSPATH\0"								      \
diff --git a/sysdeps/x86_64/multiarch/wcschr.c b/sysdeps/x86_64/multiarch/wcschr.c
index 0294b27..fab048b 100644
--- a/sysdeps/x86_64/multiarch/wcschr.c
+++ b/sysdeps/x86_64/multiarch/wcschr.c
@@ -17,6 +17,7 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifndef LIBCOMPATCOLL_MODE
 /* Define multiple versions only for the definition in libc.  */
 #if IS_IN (libc)
 # define wcschr __redirect_wcschr
@@ -37,3 +38,4 @@ __hidden_ver1 (wcschr, __GI_wcschr, __redirect_wcschr)
   __attribute__((weak, visibility ("hidden")));
 # endif
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/sysdeps/x86_64/multiarch/wcscpy.c b/sysdeps/x86_64/multiarch/wcscpy.c
index 6dffedb..4224972 100644
--- a/sysdeps/x86_64/multiarch/wcscpy.c
+++ b/sysdeps/x86_64/multiarch/wcscpy.c
@@ -17,6 +17,7 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifndef LIBCOMPATCOLL_MODE
 /* Define multiple versions only for the definition in libc.  */
 #if IS_IN (libc)
 # define wcscpy __redirect_wcscpy
@@ -42,3 +43,4 @@ IFUNC_SELECTOR (void)
 
 libc_ifunc_redirected (__redirect_wcscpy, wcscpy, IFUNC_SELECTOR ());
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/sysdeps/x86_64/multiarch/wcslen.c b/sysdeps/x86_64/multiarch/wcslen.c
index 0bb48f8..dd3da48 100644
--- a/sysdeps/x86_64/multiarch/wcslen.c
+++ b/sysdeps/x86_64/multiarch/wcslen.c
@@ -17,6 +17,7 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifndef LIBCOMPATCOLL_MODE
 /* Define multiple versions only for the definition in libc.  */
 #if IS_IN (libc)
 # define __wcslen __redirect_wcslen
@@ -29,3 +30,4 @@
 libc_ifunc_redirected (__redirect_wcslen, __wcslen, IFUNC_SELECTOR ());
 weak_alias (__wcslen, wcslen);
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/sysdeps/x86_64/multiarch/wcsnlen.c b/sysdeps/x86_64/multiarch/wcsnlen.c
index 8cdaee1..66302d6 100644
--- a/sysdeps/x86_64/multiarch/wcsnlen.c
+++ b/sysdeps/x86_64/multiarch/wcsnlen.c
@@ -17,6 +17,7 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifndef LIBCOMPATCOLL_MODE
 /* Define multiple versions only for the definition in libc.  */
 #if IS_IN (libc)
 # define __wcsnlen __redirect_wcsnlen
@@ -49,3 +50,4 @@ IFUNC_SELECTOR (void)
 libc_ifunc_redirected (__redirect_wcsnlen, __wcsnlen, IFUNC_SELECTOR ());
 weak_alias (__wcsnlen, wcsnlen);
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/sysdeps/x86_64/multiarch/wmemchr.c b/sysdeps/x86_64/multiarch/wmemchr.c
index 9065b65..5bfb21a 100644
--- a/sysdeps/x86_64/multiarch/wmemchr.c
+++ b/sysdeps/x86_64/multiarch/wmemchr.c
@@ -17,6 +17,7 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifndef LIBCOMPATCOLL_MODE
 /* Define multiple versions only for the definition in libc.  */
 #if IS_IN (libc)
 # define wmemchr __redirect_wmemchr
@@ -37,3 +38,4 @@ __hidden_ver1 (wmemchr, __GI_wmemchr, __redirect_wmemchr)
   __attribute__((weak, visibility ("hidden")));
 # endif
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/sysdeps/x86_64/multiarch/wmemcmp.c b/sysdeps/x86_64/multiarch/wmemcmp.c
index b1ba36a..625ffff 100644
--- a/sysdeps/x86_64/multiarch/wmemcmp.c
+++ b/sysdeps/x86_64/multiarch/wmemcmp.c
@@ -17,6 +17,7 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifndef LIBCOMPATCOLL_MODE
 /* Define multiple versions only for the definition in libc.  */
 #if IS_IN (libc)
 # define wmemcmp __redirect_wmemcmp
@@ -28,3 +29,4 @@
 
 libc_ifunc_redirected (__redirect_wmemcmp, wmemcmp, IFUNC_SELECTOR ());
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/sysdeps/x86_64/multiarch/wmemset.c b/sysdeps/x86_64/multiarch/wmemset.c
index 6231307..7d6522d 100644
--- a/sysdeps/x86_64/multiarch/wmemset.c
+++ b/sysdeps/x86_64/multiarch/wmemset.c
@@ -17,6 +17,7 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifndef LIBCOMPATCOLL_MODE
 /* Define multiple versions only for the definition in libc.  */
 #if IS_IN (libc)
 # define wmemset __redirect_wmemset
@@ -38,3 +39,4 @@ __hidden_ver1 (wmemset, __GI_wmemset, __redirect_wmemset)
   __attribute__ ((visibility ("hidden")));
 # endif
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/sysdeps/x86_64/multiarch/wmemset_chk.c b/sysdeps/x86_64/multiarch/wmemset_chk.c
index ec6f02a..5705a53 100644
--- a/sysdeps/x86_64/multiarch/wmemset_chk.c
+++ b/sysdeps/x86_64/multiarch/wmemset_chk.c
@@ -17,6 +17,7 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifndef LIBCOMPATCOLL_MODE
 /* Define multiple versions only for the definition in libc.so.  */
 #if IS_IN (libc) && defined SHARED
 # define __wmemset_chk __redirect_wmemset_chk
@@ -29,3 +30,4 @@
 libc_ifunc_redirected (__redirect_wmemset_chk, __wmemset_chk,
 		       IFUNC_SELECTOR ());
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/time/alt_digit.c b/time/alt_digit.c
index e3bcea4..9137d22 100644
--- a/time/alt_digit.c
+++ b/time/alt_digit.c
@@ -16,6 +16,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wcschr(a,b)		wcschr(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include "../locale/localeinfo.h"
 #include <libc-lock.h>
 #include <stdlib.h>
diff --git a/time/asctime.c b/time/asctime.c
index b57de7d..0b7a93c 100644
--- a/time/asctime.c
+++ b/time/asctime.c
@@ -15,6 +15,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __snprintf(s,n,f,...)		snprintf(s,n,f,__VA_ARGS__)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include "../locale/localeinfo.h"
 #include <errno.h>
 #include <limits.h>
diff --git a/time/ctime_r.c b/time/ctime_r.c
index ecd7731..7b51a4b 100644
--- a/time/ctime_r.c
+++ b/time/ctime_r.c
@@ -17,6 +17,13 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __localtime_r(t,r)              localtime_r(t,r)
+#define __asctime_r(t,b)		asctime_r(t,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <time.h>
 
 /* Return a string as returned by asctime which is the representation
diff --git a/time/era.c b/time/era.c
index b5743c6..ce65484 100644
--- a/time/era.c
+++ b/time/era.c
@@ -16,6 +16,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wcschr(a,b)           wcschr(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include "../locale/localeinfo.h"
 #include <libc-lock.h>
 #include <stdlib.h>
diff --git a/time/strftime_l.c b/time/strftime_l.c
index b5ba9ca..2443ee1 100644
--- a/time/strftime_l.c
+++ b/time/strftime_l.c
@@ -15,6 +15,13 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wmemcpy(d,s,n)	wmemcpy(d,s,n)
+#define __wcslen(s)		wcslen(s)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #ifdef HAVE_CONFIG_H
 # include <config.h>
 #endif
@@ -154,11 +161,12 @@ extern char *tzname[];
   ((year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))
 #endif
 
-
+#ifndef LIBCOMPATCOLL_MODE
 #ifdef _LIBC
 # define tzname __tzname
 # define tzset __tzset
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
 
 #if !HAVE_TM_GMTOFF
 /* Portable standalone applications should supply a "time_r.h" that
@@ -460,7 +468,9 @@ my_strftime (CHAR_T *s, size_t maxsize, const CHAR_T *format,
 			      ut_argument LOCALE_ARG);
 }
 #ifdef _LIBC
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (my_strftime)
+#endif /* LIBCOMPATCOLL_MODE */
 #endif
 
 static size_t
diff --git a/time/strptime.c b/time/strptime.c
index 06463b3..c7d88a7 100644
--- a/time/strptime.c
+++ b/time/strptime.c
@@ -31,4 +31,6 @@ strptime (const char *buf, const char *format, struct tm *tm)
 {
   return __strptime_internal (buf, format, tm, NULL, _NL_CURRENT_LOCALE);
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (strptime)
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/time/strptime_l.c b/time/strptime_l.c
index 185619e..bc33743 100644
--- a/time/strptime_l.c
+++ b/time/strptime_l.c
@@ -15,6 +15,22 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+/* How many days come before each month (0-12).  */
+#ifndef _LIBC
+static
+#endif 
+const unsigned short int __mon_yday[2][13] =
+  {     
+    /* Normal years.  */
+    { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 },
+    /* Leap years.  */
+    { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 }
+  };
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #ifdef HAVE_CONFIG_H
 # include <config.h>
 #endif
@@ -35,7 +51,9 @@
 
 #if ! HAVE_LOCALTIME_R && ! defined localtime_r
 # ifdef _LIBC
+#ifndef LIBCOMPATCOLL_MODE
 #  define localtime_r __localtime_r
+#endif /* LIBCOMPATCOLL_MODE */
 # else
 /* Approximate localtime_r as best we can in its absence.  */
 #  define localtime_r my_localtime_r
diff --git a/time/wcsftime.c b/time/wcsftime.c
index cbc4161..8e26172 100644
--- a/time/wcsftime.c
+++ b/time/wcsftime.c
@@ -25,4 +25,6 @@ wcsftime (wchar_t *s, size_t maxsize, const wchar_t *format,
 {
   return __wcsftime_l (s, maxsize, format, tp, _NL_CURRENT_LOCALE);
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (wcsftime)
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/wcsmbs/mbrlen.c b/wcsmbs/mbrlen.c
index 1e83638..6b8361b 100644
--- a/wcsmbs/mbrlen.c
+++ b/wcsmbs/mbrlen.c
@@ -28,5 +28,7 @@ __mbrlen (const char *s, size_t n, mbstate_t *ps)
 {
   return __mbrtowc (NULL, s, n, ps ?: &internal);
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__mbrlen)
+#endif /* LIBCOMPATCOLL_MODE */
 weak_alias (__mbrlen, mbrlen)
diff --git a/wcsmbs/mbrtowc.c b/wcsmbs/mbrtowc.c
index ea207bd..8532ab5 100644
--- a/wcsmbs/mbrtowc.c
+++ b/wcsmbs/mbrtowc.c
@@ -119,9 +119,13 @@ __mbrtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
 
   return result;
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__mbrtowc)
+#endif /* LIBCOMPATCOLL_MODE */
 weak_alias (__mbrtowc, mbrtowc)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_weak (mbrtowc)
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* There should be no difference between the UTF-32 handling required
    by mbrtoc32 and the wchar_t handling which has long since been
diff --git a/wcsmbs/mbsrtowcs_l.c b/wcsmbs/mbsrtowcs_l.c
index 33b432a..714606a 100644
--- a/wcsmbs/mbsrtowcs_l.c
+++ b/wcsmbs/mbsrtowcs_l.c
@@ -16,6 +16,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __strnlen(s,n)		strnlen(s,n)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <ctype.h>
 #include <string.h>
diff --git a/wcsmbs/wcrtomb.c b/wcsmbs/wcrtomb.c
index cc74503..a55093d 100644
--- a/wcsmbs/wcrtomb.c
+++ b/wcsmbs/wcrtomb.c
@@ -112,7 +112,9 @@ __wcrtomb (char *s, wchar_t wc, mbstate_t *ps)
   return result;
 }
 weak_alias (__wcrtomb, wcrtomb)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_weak (wcrtomb)
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* There should be no difference between the UTF-32 handling required
    by c32rtomb and the wchar_t handling which has long since been
diff --git a/wcsmbs/wcscasecmp_l.c b/wcsmbs/wcscasecmp_l.c
index 9fa1cc6..dbf33e5 100644
--- a/wcsmbs/wcscasecmp_l.c
+++ b/wcsmbs/wcscasecmp_l.c
@@ -19,5 +19,7 @@
 #define USE_IN_EXTENDED_LOCALE_MODEL	1
 #include <wcscasecmp.c>
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__wcscasecmp_l)
+#endif /* LIBCOMPATCOLL_MODE */
 weak_alias (__wcscasecmp_l, wcscasecmp_l)
diff --git a/wcsmbs/wcschr.c b/wcsmbs/wcschr.c
index 210ae07..9e08261 100644
--- a/wcsmbs/wcschr.c
+++ b/wcsmbs/wcschr.c
@@ -32,6 +32,10 @@ WCSCHR (const wchar_t *wcs, const wchar_t wc)
 
   return NULL;
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__wcschr)
 weak_alias (__wcschr, wcschr)
 libc_hidden_weak (wcschr)
+#else
+weak_alias (__wcschr, wcschr)
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/wcsmbs/wcscmp.c b/wcsmbs/wcscmp.c
index 9c0d761..8b44e5e 100644
--- a/wcsmbs/wcscmp.c
+++ b/wcsmbs/wcscmp.c
@@ -41,5 +41,7 @@ WCSCMP (const wchar_t *s1, const wchar_t *s2)
 
   return c1 < c2 ? -1 : 1;
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (WCSCMP)
+#endif /* LIBCOMPATCOLL_MODE */
 weak_alias (WCSCMP, wcscmp)
diff --git a/wcsmbs/wcsncase_l.c b/wcsmbs/wcsncase_l.c
index 70d9e6d..8e066b0 100644
--- a/wcsmbs/wcsncase_l.c
+++ b/wcsmbs/wcsncase_l.c
@@ -19,5 +19,7 @@
 #define USE_IN_EXTENDED_LOCALE_MODEL	1
 #include <wcsncase.c>
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__wcsncasecmp_l)
+#endif /* LIBCOMPATCOLL_MODE */
 weak_alias (__wcsncasecmp_l, wcsncasecmp_l)
diff --git a/wcsmbs/wcsrtombs.c b/wcsmbs/wcsrtombs.c
index 9b6efa7..9b1fd01 100644
--- a/wcsmbs/wcsrtombs.c
+++ b/wcsmbs/wcsrtombs.c
@@ -16,6 +16,13 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wcslen(s)             wcslen(s)
+#define __wcsnlen(s,n)             wcsnlen(s,n)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <dlfcn.h>
 #include <errno.h>
diff --git a/wcsmbs/wmemset.c b/wcsmbs/wmemset.c
index d79b95b..035e480 100644
--- a/wcsmbs/wmemset.c
+++ b/wcsmbs/wmemset.c
@@ -52,6 +52,10 @@ __wmemset (wchar_t *s, wchar_t c, size_t n)
 
   return s;
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__wmemset)
 weak_alias (__wmemset, wmemset)
 libc_hidden_weak (wmemset)
+#else
+weak_alias (__wmemset, wmemset)
+#endif /* LIBCOMPATCOLL_MODE */
