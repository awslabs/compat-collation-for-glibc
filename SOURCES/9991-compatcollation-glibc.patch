diff --git a/bits/dlfcn.h b/bits/dlfcn.h
index 8c5931e..0b66520 100644
--- a/bits/dlfcn.h
+++ b/bits/dlfcn.h
@@ -51,8 +51,12 @@
    into
         foo = DL_CALL_FCT (fctp, (arg1, arg2));
 */
+#ifdef LIBCOMPATCOLL_MODE
+# define DL_CALL_FCT(fctp, args)  ((*(fctp)) args)
+#else
 # define DL_CALL_FCT(fctp, args) \
   (_dl_mcount_wrapper_check ((void *) (fctp)), (*(fctp)) args)
+#endif /* LIBCOMPATCOLL_MODE */
 
 __BEGIN_DECLS
 
diff --git a/compatcollation/Makefile b/compatcollation/Makefile
new file mode 100644
index 0000000..df6cc74
--- /dev/null
+++ b/compatcollation/Makefile
@@ -0,0 +1,33 @@
+###############################
+# Build compatcollation lib and so
+###############################
+.PHONY: clean install
+
+COMPATPREFIX ?= $(error COMPATPREFIX is undefined)
+BUILDROOT ?= $(error BUILDROOT is undefined)
+BUILDDIR ?= $(error BUILDDIR is undefined)
+INSTALLROOT ?= $(error INSTALLROOT is undefined)
+GLIBCVERSION ?= $(error GLIBCVERSION is undefined)
+GLIBCRELEASE ?= $(error GLIBCRELEASE is undefined)
+COMPATCOLLATIONVERSION ?= $(error COMPATCOLLATIONVERSION is undefined)
+
+
+all: $(BUILDDIR)/libcompatcollation.$(GLIBCVERSION)-$(GLIBCRELEASE).so
+
+clean:
+	rm -f $(BUILDDIR)/compatcollation/compatcollation.os $(BUILDDIR)/libccompat_pic.a $(BUILDDIR)/libccompat_pic.os $(BUILDDIR)/libcompatcollation.$(GLIBCVERSION)-$(GLIBCRELEASE).so
+
+install:
+	mkdir -p $(INSTALLROOT)$(COMPATPREFIX)/lib64/gconv-compatcollation$(COMPATCOLLATIONVERSION) $(INSTALLROOT)$(COMPATPREFIX)/lib/locale-compatcollation$(COMPATCOLLATIONVERSION) $(INSTALLROOT)$(COMPATPREFIX)/share/locale-compatcollation$(COMPATCOLLATIONVERSION) && \
+	cp -r $(INSTALLROOT)/usr/lib64/gconv/* $(INSTALLROOT)$(COMPATPREFIX)/lib64/gconv-compatcollation$(COMPATCOLLATIONVERSION)/ && \
+#	cp -r $(INSTALLROOT)/usr/lib/locale/C.utf8 $(INSTALLROOT)$(COMPATPREFIX)/lib/locale-compatcollation$(COMPATCOLLATIONVERSION)/ && \
+	cp -r $(INSTALLROOT)/usr/lib/locale/locale* $(INSTALLROOT)$(COMPATPREFIX)/lib/locale-compatcollation$(COMPATCOLLATIONVERSION)/ && \
+	cp -r $(INSTALLROOT)/usr/share/locale/* $(INSTALLROOT)$(COMPATPREFIX)/share/locale-compatcollation$(COMPATCOLLATIONVERSION)/ && \
+	cp $(BUILDDIR)/libcompatcollation.$(GLIBCVERSION)-$(GLIBCRELEASE).so $(INSTALLROOT)$(COMPATPREFIX)/lib64/
+
+$(BUILDDIR)/libcompatcollation.$(GLIBCVERSION)-$(GLIBCRELEASE).so:
+	mkdir -p $(BUILDDIR)/compatcollation && \
+	cd $(BUILDROOT)/compatcollation && \
+	chmod 755 ./build-compatcollation.sh && \
+	./build-compatcollation.sh | tee glibc-rpmbuild-compat.out
+
diff --git a/compatcollation/build-compatcollation.sh b/compatcollation/build-compatcollation.sh
new file mode 100644
index 0000000..c0e4a8a
--- /dev/null
+++ b/compatcollation/build-compatcollation.sh
@@ -0,0 +1,260 @@
+#!/bin/bash
+err_exit() {
+  if [ ${1} -gt 0 ]; then
+    echo "************* Failed      *************"
+    echo "************* Exit Code $? *************"
+    exit $1
+  fi
+}
+
+skip_comment() {
+  line="$1"
+  if [[ ${line::1} == "#" ]]
+  then
+    continue
+  fi
+}
+
+if [ -z "${COMPATPREFIX}" ] ; then
+  echo "COMPATPREFIX is undefined"
+  exit 1
+fi
+if [ -z "${BUILDROOT}" ] ; then
+  echo "BUILDROOT is undefined"
+  exit 1
+fi
+if [ -z "${BUILDDIR}" ] ; then
+  echo "BUILDDIR is undefined"
+  exit 1
+fi
+if [ -z "${GLIBCVERSION}" ] ; then
+  echo "GLIBCVERSION is undefined"
+  exit 1
+fi
+if [ -z "${GLIBCRELEASE}" ] ; then
+  echo "GLIBCRELEASE is undefined"
+  exit 1
+fi
+if [ -z "${COMPATCOLLATIONVERSION}" ] ; then
+  echo "COMPATCOLLATIONVERSION is undefined"
+  exit 1
+fi
+
+GLIBCRELEASE_STR="'\"${GLIBCRELEASE}\"'"
+BUILDOUT="${BUILDROOT}/compatcollation/glibc-rpmbuild.out"
+BUILDFILES="${BUILDROOT}/compatcollation/buildfiles.txt"
+
+mkdir -p ${BUILDDIR}/compatcollation
+
+ULL="/usr/lib/locale"
+ULLC="${COMPATPREFIX}/lib/locale-compatcollation${COMPATCOLLATIONVERSION}"
+USL="/usr/share/locale"
+USLC="${COMPATPREFIX}/share/locale-compatcollation${COMPATCOLLATIONVERSION}"
+ULG="/usr/lib64/gconv"
+ULGC="${COMPATPREFIX}/lib64/gconv-compatcollation${COMPATCOLLATIONVERSION}"
+ULeG="/usr/libexec/getconf"
+ULeGC="${COMPATPREFIX}/libexec/getconf-compatcollation${COMPATCOLLATIONVERSION}"
+GCCSRCVER="7"
+GCCTGTVER="7"
+
+if [[ "$1" == "" ]]
+then
+lastdir=""
+while read currpath
+do
+  skip_comment "${currpath}"
+  currdir=$(dirname ${currpath})
+  currbase=$(basename ${currpath})
+  if [[ ${currdir} != ${lastdir} ]]
+  then
+    echo "changing directory to ${BUILDROOT}/${currdir}"
+    cd ${BUILDROOT}/${currdir}
+  fi
+  lastdir=${currdir}
+
+  # special cases
+  if [[ "${currdir}/${currbase}" == "misc/mremap" || 
+        "${currdir}/${currbase}" == "misc/munmap" ||
+        "${currdir}/${currbase}" == "posix/sched_yield" ||
+        "${currdir}/${currbase}" == "socket/socket" ||
+        "${currdir}/${currbase}" == "misc/madvise" ||
+        "${currdir}/${currbase}" == "misc/mprotect"
+     ]]
+  then
+    GCCCOMPSTR="$(grep -B6 -Ee '^\) \| gcc \-c.+?'${currdir}/${currbase}.os'\s$' ${BUILDOUT})"
+
+    # decruft the string
+    DIN="\; \\\\"
+    DOU="\; "
+    GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+  elif [[ "${currdir}/${currbase}" == "misc/syscall_clock_gettime" ]]
+  then
+    GCCCOMPSTR="$(grep -B5 -Ee '^\) \| gcc \-c.+?'${currdir}/${currbase}.os'\s$' ${BUILDOUT})"
+
+    # decruft the string
+    DIN="\; \\\\"
+    DOU="\; "
+    GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+  elif [[ "${currdir}/${currbase}" == "misc/sysinfo" ]]
+  then
+    GCCCOMPSTR="$(grep -B4 -Ee '^\) \| gcc \-c.+?'${currdir}/${currbase}.os'\s$' ${BUILDOUT})"
+
+    # decruft the string
+    DIN="\; \\\\"
+    DOU="\; "
+    GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+  elif [[ "${currdir}/${currbase}" == "io/open" ]]
+  then
+    GCCCOMPSTR="$(grep -B13 -Ee '^\) \| gcc \-c.+?'${currdir}/${currbase}.os'\s$' ${BUILDOUT})"
+
+    # decruft the string
+    DIN="\; \\\\"
+    DOU="\; "
+    GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+  elif [[ "${currdir}/${currbase}" == "resource/getrlimit" ]]
+  then
+    GCCCOMPSTR="$(grep -B8 -Ee '^\) \| gcc \-c.+?'${currdir}/${currbase}.os'\s$' ${BUILDOUT})"
+
+    # decruft the string
+    DIN="\; \\\\"
+    DOU="\; "
+    GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+  elif [[ "${currdir}/${currbase}" == "io/read" ||
+          "${currdir}/${currbase}" == "io/write" ||
+          "${currdir}/${currbase}" == "io/close" ||
+          "${currdir}/${currbase}" == "socket/connect"
+       ]]
+  then
+    GCCCOMPSTR="$(grep -B9 -Ee '^\) \| gcc \-c.+?'${currdir}/${currbase}.os'\s$' ${BUILDOUT})"
+
+    # decruft the string
+    DIN="\; \\\\"
+    DOU="\; "
+    GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+  elif [[ "${currdir}/${currbase}" == "misc/llseek" ]]
+  then
+    GCCCOMPSTR="$(grep -B19 -Ee '^\) \| gcc \-c.+?'${currdir}/${currbase}.os'\s$' ${BUILDOUT})"
+
+    # decruft the string
+    DIN="\; \\\\"
+    DOU="\; "
+    GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+  # Now process the usual suspects
+  else
+    GCCCOMPSTR=$(grep -E "^gcc.+?${currbase}\.(c|S).+?${currdir}/${currbase}.os\s?$" ${BUILDOUT})
+    # some source files are *.S for assembly
+  fi
+
+  # fix buildtime defined paths
+  DIN="DCOMPLOCALEDIR='\"${ULL}\"'"
+  DOU="DCOMPLOCALEDIR='\"${ULLC}\"'"
+  GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+
+  DIN="DLOCALEDIR='\"${ULL}\"'"
+  DOU="DLOCALEDIR='\"${ULLC}\"'"
+  GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+
+  DIN="DLOCALE_ALIAS_PATH='\"${USL}\"'"
+  DOU="DLOCALE_ALIAS_PATH='\"${USLC}\"'"
+  GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+
+  DIN="D'LOCALE_ALIAS_PATH=\"${USL}\"'"
+  DOU="D'LOCALE_ALIAS_PATH=\"${USLC}\"'"
+  GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+
+  DIN="D'LOCALEDIR=\"${USL}\"'"
+  DOU="D'LOCALEDIR=\"${USLC}\"'"
+  GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+
+  DIN="DGCONV_DIR='\"${ULG}\"'"
+  DOU="DGCONV_DIR='\"${ULGC}\"'"
+  GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+
+  DIN="DGCONV_PATH='\"${ULG}\"'"
+  DOU="DGCONV_PATH='\"${ULGC}\"'"
+  GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+
+  DIN="DGETCONF_DIR='\"${ULeG}\"'"
+  DOU="DGETCONF_DIR='\"${ULeGC}\"'"
+  GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+
+  # fix system include path based on gcc version
+  DIN="usr/lib/gcc/x86_64-redhat-linux/${GCCSRCVER}/include"
+  DOU="usr/lib/gcc/x86_64-redhat-linux/${GCCTGTVER}/include"
+  GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+
+  # inject -DLIBCOMPATCOLL_MODE and version string suffix
+  DIN="\-DMODULE_NAME=libc"
+  DOU="\-DMODULE_NAME=libc \-DLIBCOMPATCOLL_MODE \-DGLIBCRELEASE=$(echo ${GLIBCRELEASE_STR})"
+  GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+
+  # modify the object extension to our own
+  DIN="${currdir}/${currbase}.os"
+  DOU="${currdir}/${currbase}.oc"
+  GCCCOMPSTR=$(sed -e "s:${DIN}:${DOU}:g" <<< "${GCCCOMPSTR}")
+
+  # output for the record
+  echo ${GCCCOMPSTR}
+  # and run it
+  eval ${GCCCOMPSTR}
+  err_exit $?
+done <<< "$(cat ${BUILDFILES})"
+cd ${BUILDROOT}
+fi #skip if arg passed
+
+arstr=""
+while read currpath
+do
+  skip_comment "${currpath}"
+  currdir=$(dirname ${currpath})
+  currbase=$(basename ${currpath})
+
+  arstr="${arstr} ${currdir}/${currbase}.oc"
+done <<< "$(cat ${BUILDFILES})"
+cd ${BUILDROOT}
+
+# create object archive
+cd ${BUILDDIR}
+echo "ar cruv libcompatcollation_pic.a ${arstr}"
+rm -f libcompatcollation_pic.a
+ar cruv libcompatcollation_pic.a $(echo ${arstr})
+err_exit $?
+
+# create libcompatcollation_pic.os
+gcc -nostdlib -nostartfiles -r \
+-Wl,-d -Wl,--whole-archive ${BUILDDIR}/libcompatcollation_pic.a \
+-o ${BUILDDIR}/libcompatcollation_pic.os
+err_exit $?
+
+# build libcompatcollation.so library
+cd ${BUILDROOT}
+
+ENABLE_LD_PRELOAD=0
+if [[ "${ENABLE_LD_PRELOAD}" == "1" ]]
+then
+  VERSIONMAP="${BUILDDIR}/libc.map"
+else
+  VERSIONMAP="${BUILDROOT}/compatcollation/libcompatcollation.map"
+fi
+
+# link
+GCCCOMPSTR="gcc -shared -Wl,-Bsymbolic \
+-Wl,-O1 -Wl,-z,defs -fPIC \
+-Wl,--version-script=${VERSIONMAP} \
+-Wl,-soname=libcompatcollation.${GLIBCVERSION}-${GLIBCRELEASE}.so -Wl,-z,combreloc \
+-Wl,-z,relro -Wl,--hash-style=both -Wl,-z,now \
+-L${BUILDDIR} -L${BUILDDIR}/math -L${BUILDDIR}/elf -L${BUILDDIR}/dlfcn \
+-L${BUILDDIR}/nss -L${BUILDDIR}/nis -L${BUILDDIR}/rt -L${BUILDDIR}/resolv -L${BUILDDIR}/crypt \
+-L${BUILDDIR}/support -L${BUILDDIR}/nptl \
+-Wl,-rpath-link=${BUILDDIR}:${BUILDDIR}/math:${BUILDDIR}/elf:${BUILDDIR}/dlfcn:${BUILDDIR}/nss:${BUILDDIR}/nis:${BUILDDIR}/rt:${BUILDDIR}/resolv:${BUILDDIR}/crypt:${BUILDDIR}/support:${BUILDDIR}/nptl \
+-o ${BUILDDIR}/libcompatcollation.${GLIBCVERSION}-${GLIBCRELEASE}.so \
+${BUILDDIR}/libcompatcollation_pic.os -ldl"
+
+# output for the record
+echo ${GCCCOMPSTR}
+# and run it
+eval ${GCCCOMPSTR}
+
+err_exit $?
+
+echo "Created: ${BUILDDIR}/libcompatcollation.${GLIBCVERSION}-${GLIBCRELEASE}.so"
diff --git a/compatcollation/buildfiles.txt b/compatcollation/buildfiles.txt
new file mode 100644
index 0000000..a8ebcc5
--- /dev/null
+++ b/compatcollation/buildfiles.txt
@@ -0,0 +1,208 @@
+# Intentionally skipped. Unused in PostgreSQL,
+# cause issues for the compatcollation library
+#######################
+#strfmon
+#strfmon_l
+#strcasecmp
+#strcasecmp_l
+#strncasecmp
+#strncasecmp_l
+#libio/genops
+#libio/stdfiles
+#libio/strops
+#######################
+nptl/libc_multiple_threads
+nptl/libc-lowlevellock
+nptl/forward
+nptl/alloca_cutoff
+csu/version
+ctype/ctype
+ctype/ctype-extn
+ctype/ctype-info
+ctype/ctype_l
+ctype/isctype
+iconv/gconv
+iconv/gconv_builtin
+iconv/gconv_cache
+iconv/gconv_close
+iconv/gconv_conf
+iconv/gconv_db
+iconv/gconv_dl
+iconv/gconv_open
+iconv/gconv_simple
+iconv/gconv_trans
+intl/bindtextdom
+intl/dgettext
+intl/dcgettext
+intl/dcigettext
+intl/dcngettext
+intl/dngettext
+intl/explodename
+intl/finddomain
+intl/gettext
+intl/hash-string
+intl/l10nflist
+intl/loadmsgcat
+intl/localealias
+intl/ngettext
+intl/plural
+intl/plural-exp
+intl/textdomain
+locale/C-address
+locale/C-collate
+locale/C-ctype
+locale/C-identification
+locale/C-measurement
+locale/C-messages
+locale/C-monetary
+locale/C-name
+locale/C-numeric
+locale/C-paper
+locale/C-telephone
+locale/C-time
+locale/C_name
+locale/SYS_libc
+locale/coll-lookup
+locale/duplocale
+locale/findlocale
+locale/freelocale
+locale/global-locale
+locale/lc-ctype
+locale/loadarchive
+locale/loadlocale
+locale/localeconv
+locale/localename
+locale/newlocale
+locale/nl_langinfo
+locale/nl_langinfo_l
+locale/setlocale
+locale/uselocale
+locale/xlocale
+stdio-common/errlist
+stdio-common/_itoa
+stdio-common/itoa-digits
+stdio-common/itoa-udigits
+stdlib/add_n
+stdlib/addmul_1
+stdlib/cmp
+stdlib/dbl2mpn
+stdlib/divrem
+stdlib/fpioconst
+stdlib/grouping
+stdlib/groupingwc
+stdlib/ldbl2mpn
+stdlib/lshift
+stdlib/mblen
+stdlib/mbstowcs
+stdlib/mbtowc
+stdlib/mpn2dbl
+stdlib/mpn2flt
+stdlib/mpn2ldbl
+stdlib/mul
+stdlib/mul_1
+stdlib/mul_n
+stdlib/rshift
+stdlib/strtod
+stdlib/strtod_l
+stdlib/strtod_nan
+stdlib/strtof
+stdlib/strtof_l
+stdlib/strtof_nan
+stdlib/strtol
+stdlib/strtol_l
+stdlib/strtold
+stdlib/strtold_l
+stdlib/strtold_nan
+stdlib/strtoll
+stdlib/strtoll_l
+stdlib/strtoul
+stdlib/strtoul_l
+stdlib/strtoull
+stdlib/strtoull_l
+stdlib/sub_n
+stdlib/submul_1
+stdlib/tens_in_limb
+stdlib/wcstombs
+stdlib/wctomb
+string/argz-addsep
+string/argz-append
+string/argz-count
+string/argz-create
+string/argz-ctsep
+string/argz-delete
+string/argz-extract
+string/argz-insert
+string/argz-next
+string/argz-replace
+string/argz-stringify
+string/strcoll
+string/strcoll_l
+string/_strerror
+string/strerror
+string/strerror_l
+string/strxfrm
+string/strxfrm_l
+time/alt_digit
+time/asctime
+time/ctime
+time/ctime_r
+time/era
+time/lc-time-cleanup
+time/strftime
+time/strftime_l
+time/strptime
+time/strptime_l
+time/wcsftime
+time/wcsftime_l
+wcsmbs/btowc
+wcsmbs/mbrlen
+wcsmbs/mbrtowc
+wcsmbs/mbsrtowcs
+wcsmbs/mbsrtowcs_l
+wcsmbs/wcpncpy
+wcsmbs/wcrtomb
+wcsmbs/wcscasecmp
+wcsmbs/wcscasecmp_l
+wcsmbs/wcschr
+wcsmbs/wcschrnul
+wcsmbs/wcscmp
+wcsmbs/wcscoll
+wcsmbs/wcscoll_l
+wcsmbs/wcslen
+wcsmbs/wcsmbsload
+wcsmbs/wcsncase_l
+wcsmbs/wcsnlen
+wcsmbs/wcsrtombs
+wcsmbs/wcstod
+wcsmbs/wcstod_l
+wcsmbs/wcstod_nan
+wcsmbs/wcstof
+wcsmbs/wcstof_l
+wcsmbs/wcstof_nan
+wcsmbs/wcstol
+wcsmbs/wcstold
+wcsmbs/wcstold_l
+wcsmbs/wcstold_nan
+wcsmbs/wcstol_l
+wcsmbs/wcstoll
+wcsmbs/wcstoll_l
+wcsmbs/wcstoul
+wcsmbs/wcstoul_l
+wcsmbs/wcstoull
+wcsmbs/wcstoull_l
+wcsmbs/wcsxfrm
+wcsmbs/wcsxfrm_l
+wcsmbs/wmemcpy
+wcsmbs/wmemmove
+wcsmbs/wmempcpy
+wcsmbs/wmemset
+wctype/iswctype
+wctype/iswctype_l
+wctype/towctrans
+wctype/towctrans_l
+wctype/wcfuncs
+wctype/wcfuncs_l
+wctype/wctrans
+wctype/wctrans_l
+wctype/wctype
+wctype/wctype_l
diff --git a/compatcollation/libcompatcollation.map b/compatcollation/libcompatcollation.map
new file mode 100644
index 0000000..e456566
--- /dev/null
+++ b/compatcollation/libcompatcollation.map
@@ -0,0 +1,236 @@
+GLIBC_2.2.5 {
+  local:
+    *;
+};
+GLIBC_2.2.6 {
+  local:
+    *;
+} GLIBC_2.2.5;
+GLIBC_2.3 {
+  local:
+    *;
+} GLIBC_2.2.6;
+GLIBC_2.3.2 {
+  local:
+    *;
+} GLIBC_2.3;
+GLIBC_2.3.3 {
+  local:
+    *;
+} GLIBC_2.3.2;
+GLIBC_2.3.4 {
+  local:
+    *;
+} GLIBC_2.3.3;
+GLIBC_2.4 {
+  local:
+    *;
+} GLIBC_2.3.4;
+GLIBC_2.5 {
+  local:
+    *;
+} GLIBC_2.4;
+GLIBC_2.6 {
+  local:
+    *;
+} GLIBC_2.5;
+GLIBC_2.7 {
+  local:
+    *;
+} GLIBC_2.6;
+GLIBC_2.8 {
+  local:
+    *;
+} GLIBC_2.7;
+GLIBC_2.9 {
+  local:
+    *;
+} GLIBC_2.8;
+GLIBC_2.10 {
+  local:
+    *;
+} GLIBC_2.9;
+GLIBC_2.11 {
+  local:
+    *;
+} GLIBC_2.10;
+GLIBC_2.12 {
+  local:
+    *;
+} GLIBC_2.11;
+GLIBC_2.13 {
+  local:
+    *;
+} GLIBC_2.12;
+GLIBC_2.14 {
+  local:
+    *;
+} GLIBC_2.13;
+GLIBC_2.15 {
+  local:
+    *;
+} GLIBC_2.14;
+GLIBC_2.16 {
+  local:
+    *;
+} GLIBC_2.15;
+COMPATCOLL_1.0 {
+  global:
+    __ctype_b_loc;
+    __ctype_init;
+    __ctype_tolower;
+    __ctype_toupper;
+    _tolower;
+    _toupper;
+    asctime;
+    asctime_r;
+    bind_textdomain_codeset;
+    bindtextdomain;
+    ctime;
+    ctime_r;
+    dcgettext;
+    dcngettext;
+    dgettext;
+    dngettext;
+    duplocale;
+    freelocale;
+    gettext;
+    gnu_get_libc_version;
+    isalnum;
+    isalnum_l;
+    isalpha;
+    isalpha_l;
+    isascii;
+    isblank;
+    isblank_l;
+    iscntrl;
+    iscntrl_l;
+    __isctype;
+    isctype;
+    isdigit;
+    isdigit_l;
+    isgraph;
+    isgraph_l;
+    islower;
+    islower_l;
+    isprint;
+    isprint_l;
+    ispunct;
+    ispunct_l;
+    isspace;
+    isspace_l;
+    isupper;
+    isupper_l;
+    iswalnum;
+    iswalnum_l;
+    iswalpha;
+    iswalpha_l;
+    iswblank;
+    iswblank_l;
+    iswcntrl;
+    iswcntrl_l;
+    iswctype;
+    iswdigit;
+    iswdigit_l;
+    iswgraph;
+    iswgraph_l;
+    iswlower;
+    iswlower_l;
+    iswprint;
+    iswprint_l;
+    iswpunct;
+    iswpunct_l;
+    iswspace;
+    iswspace_l;
+    iswupper;
+    iswupper_l;
+    iswxdigit;
+    iswxdigit_l;
+    isxdigit;
+    isxdigit_l;
+    localeconv;
+    mblen;
+    mbstowcs;
+    mbtowc;
+    newlocale;
+    ngettext;
+    nl_langinfo;
+    nl_langinfo_l;
+    setlocale;
+    strcasecmp;
+    strcasecmp_l;
+    strcoll;
+    strcoll_l;
+    strerror;
+    strerror_l;
+    strerror_r;
+    strfmon;
+    strfmon_l;
+    strftime;
+    strncasecmp;
+    strncasecmp_l;
+    strptime;
+    strptime_l;
+    strtod;
+    strtod_l;
+    strtof;
+    strtof_l;
+    strtol;
+    strtol_l;
+    strtold;
+    strtold_l;
+    strtoll;
+    strtoll_l;
+    strtoul;
+    strtoul_l;
+    strtoull;
+    strtoull_l;
+    strxfrm;
+    strxfrm_l;
+    textdomain;
+    toascii;
+    tolower;
+    tolower_l;
+    toupper;
+    toupper_l;
+    towctrans;
+    towlower;
+    towlower_l;
+    towupper;
+    towupper_l;
+    uselocale;
+    wcscasecmp;
+    wcscasecmp_l;
+    wcscoll;
+    wcscoll_l;
+    wcsftime;
+    wcsncasecmp;
+    wcsncasecmp_l;
+    wcstod;
+    wcstod_l;
+    wcstof;
+    wcstof_l;
+    wcstol;
+    wcstol_l;
+    wcstold;
+    wcstold_l;
+    wcstoll;
+    wcstoll_l;
+    wcstombs;
+    wcstoul;
+    wcstoul_l;
+    wcstoull;
+    wcstoull_l;
+    wcsxfrm;
+    wcsxfrm_l;
+    wctomb;
+    wctrans;
+    wctype;
+  local:
+    *;
+} GLIBC_2.16;
+GLIBC_PRIVATE {
+  local:
+    *;
+} COMPATCOLL_1.0;
+
diff --git a/csu/version.c b/csu/version.c
index 9fe9fef..6762dcd 100644
--- a/csu/version.c
+++ b/csu/version.c
@@ -20,9 +20,31 @@
 #include <libc-abis.h>
 #include <gnu/libc-version.h>
 
+#ifdef LIBCOMPATCOLL_MODE
+static const char __libc_release[] = RELEASE " (compatcollation)";
+static const char __libc_version[] = VERSION "-" GLIBCRELEASE;
+
+/* the following copied from elf/rtld.c to support aarch64 */
+#ifndef THREAD_SET_STACK_GUARD
+/* Only exported for architectures that don't store the stack guard canary
+   in thread local area.  */
+uintptr_t __stack_chk_guard attribute_relro;
+#endif
+
+/* Only exported for architectures that don't store the pointer guard
+   value in thread local area.  */
+uintptr_t __pointer_chk_guard_local
+     attribute_relro attribute_hidden __attribute__ ((nocommon));
+#ifndef THREAD_SET_POINTER_GUARD
+strong_alias (__pointer_chk_guard_local, __pointer_chk_guard)
+#endif
+
+#else
 static const char __libc_release[] = RELEASE;
 static const char __libc_version[] = VERSION;
+#endif /* LIBCOMPATCOLL_MODE */
 
+#ifndef LIBCOMPATCOLL_MODE
 static const char banner[] =
 "GNU C Library "PKGVERSION RELEASE" release version "VERSION", by Roland McGrath et al.\n\
 Copyright (C) 2012 Free Software Foundation, Inc.\n\
@@ -48,6 +70,7 @@ __libc_print_version (void)
 {
   __write (STDOUT_FILENO, banner, sizeof banner - 1);
 }
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern const char *__gnu_get_libc_release (void);
 const char *
@@ -68,6 +91,7 @@ weak_alias (__gnu_get_libc_version, gnu_get_libc_version)
 /* This function is the entry point for the shared object.
    Running the library as a program will get here.  */
 
+#ifndef LIBCOMPATCOLL_MODE
 extern void __libc_main (void) __attribute__ ((noreturn));
 void
 __libc_main (void)
@@ -75,3 +99,4 @@ __libc_main (void)
   __libc_print_version ();
   _exit (0);
 }
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/ctype/ctype-info.c b/ctype/ctype-info.c
index 3a48c67..03bf63e 100644
--- a/ctype/ctype-info.c
+++ b/ctype/ctype-info.c
@@ -25,6 +25,9 @@ __libc_tsd_define (, const int32_t *, CTYPE_TOLOWER)
 __libc_tsd_define (, const int32_t *, CTYPE_TOUPPER)
 
 
+#ifdef LIBCOMPATCOLL_MODE
+__attribute__((constructor))
+#endif /* LIBCOMPATCOLL_MODE */
 void
 __ctype_init (void)
 {
@@ -35,7 +38,9 @@ __ctype_init (void)
   const int32_t **lp = __libc_tsd_address (const int32_t *, CTYPE_TOLOWER);
   *lp = ((int32_t *) _NL_CURRENT (LC_CTYPE, _NL_CTYPE_TOLOWER) + 128);
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__ctype_init)
+#endif /* LIBCOMPATCOLL_MODE */
 
 
 #include <shlib-compat.h>
@@ -68,11 +73,13 @@ const __int32_t *__ctype_toupper = b (__int32_t, toupper, 128);
 const __uint32_t *__ctype32_tolower = b (__uint32_t, tolower, 128);
 const __uint32_t *__ctype32_toupper = b (__uint32_t, toupper, 128);
 
+#ifndef LIBCOMPATCOLL_MODE
 compat_symbol (libc, __ctype_b, __ctype_b, GLIBC_2_0);
 compat_symbol (libc, __ctype_tolower, __ctype_tolower, GLIBC_2_0);
 compat_symbol (libc, __ctype_toupper, __ctype_toupper, GLIBC_2_0);
 compat_symbol (libc, __ctype32_b, __ctype32_b, GLIBC_2_0);
 compat_symbol (libc, __ctype32_tolower, __ctype32_tolower, GLIBC_2_2);
 compat_symbol (libc, __ctype32_toupper, __ctype32_toupper, GLIBC_2_2);
+#endif /* LIBCOMPATCOLL_MODE */
 
 #endif
diff --git a/iconv/gconv_cache.c b/iconv/gconv_cache.c
index 0d79d60..6e7b6e8 100644
--- a/iconv/gconv_cache.c
+++ b/iconv/gconv_cache.c
@@ -17,6 +17,14 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __mmap(a,b,c,d,e,f)		mmap(a,b,c,d,e,f)
+#define __munmap(a,b)			munmap(a,b)
+#define __read(a,b,c)			read(a,b,c)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <dlfcn.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -30,6 +38,12 @@
 #include <iconvconfig.h>
 #include <not-cancel.h>
 
+#ifdef LIBCOMPATCOLL_MODE
+#undef open_not_cancel
+#define open_not_cancel(name, flags, mode) \
+   INLINE_SYSCALL (open, 3, (const char *) (name), (flags), (mode))
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include "../intl/hash-string.h"
 
 static void *gconv_cache;
@@ -54,7 +68,11 @@ __gconv_load_cache (void)
 
   /* We cannot use the cache if the GCONV_PATH environment variable is
      set.  */
+#ifndef LIBCOMPATCOLL_MODE
   __gconv_path_envvar = getenv ("GCONV_PATH");
+#else
+  __gconv_path_envvar = getenv ("COMPAT_GCONV_PATH");
+#endif /* LIBCOMPATCOLL_MODE */
   if (__gconv_path_envvar != NULL)
     return -1;
 
diff --git a/iconv/gconv_conf.c b/iconv/gconv_conf.c
index e9fc961..2a61953 100644
--- a/iconv/gconv_conf.c
+++ b/iconv/gconv_conf.c
@@ -17,6 +17,15 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __tsearch(a,b,c)	tsearch(a,b,c)
+#define __tfind(a,b,c)		tfind(a,b,c)
+#define __getcwd(a,b)		getcwd(a,b)
+#define __getdelim(line, len, c, fp) getdelim (line, len, c, fp)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <ctype.h>
 #include <errno.h>
@@ -89,8 +98,10 @@ static const char builtin_aliases[] =
 #undef BUILTIN_ALIAS
 };
 
+#ifndef LIBCOMPATCOLL_MODE
 #include <libio/libioP.h>
 #define __getdelim(line, len, c, fp) _IO_getdelim (line, len, c, fp)
+#endif /* LIBCOMPATCOLL_MODE */
 
 
 /* Value of the GCONV_PATH environment variable.  */
diff --git a/iconv/gconv_db.c b/iconv/gconv_db.c
index eb09544..7aec525 100644
--- a/iconv/gconv_db.c
+++ b/iconv/gconv_db.c
@@ -17,6 +17,14 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __tsearch(a,b,c)        tsearch(a,b,c)
+#define __tfind(a,b,c)          tfind(a,b,c)
+#define __tdestroy(a,b)		tdestroy(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <limits.h>
 #include <search.h>
diff --git a/iconv/gconv_dl.c b/iconv/gconv_dl.c
index f3d7e45..d1755a4 100644
--- a/iconv/gconv_dl.c
+++ b/iconv/gconv_dl.c
@@ -18,8 +18,31 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __tsearch(a,b,c)        tsearch(a,b,c)
+#define __tfind(a,b,c)          tfind(a,b,c)
+#define __twalk(a,b)		twalk(a,b)
+#define __tdestroy(a,b)		tdestroy(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <dlfcn.h>
+#ifdef LIBCOMPATCOLL_MODE
+#ifdef __libc_dlopen
+#undef __libc_dlopen
+#endif
+#define __libc_dlopen(n)        dlopen (n, RTLD_LAZY)
+#ifdef __libc_dlclose
+#undef __libc_dlclose
+#endif
+#define __libc_dlclose(h)       dlclose(h)
+#ifdef __libc_dlsym
+#undef __libc_dlsym
+#endif
+#define __libc_dlsym(h,s)       dlsym(h,s)
+#endif /* LIBCOMPATCOLL_MODE */
 #include <inttypes.h>
 #include <search.h>
 #include <stdlib.h>
diff --git a/include/assert.h b/include/assert.h
index c452667..a99bdd1 100644
--- a/include/assert.h
+++ b/include/assert.h
@@ -21,7 +21,9 @@ extern void __assert_fail_base (const char *fmt, const char *assertion,
      __THROW  __attribute__ ((__noreturn__));
 
 # if IS_IN (libc) || IS_IN (rtld)
+#ifndef LIBCOMPATCOLL_MODE
 hidden_proto (__assert_fail)
 hidden_proto (__assert_perror_fail)
+#endif /* LIBCOMPATCOLL_MODE */
 # endif
 #endif
diff --git a/include/ctype.h b/include/ctype.h
index 85f3db7..ddaf011 100644
--- a/include/ctype.h
+++ b/include/ctype.h
@@ -3,7 +3,9 @@
 #ifndef _ISOMAC
 /* Initialize ctype locale data.  */
 extern void __ctype_init (void);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__ctype_init)
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern int __isctype (int __c, int __mask);
 
diff --git a/include/errno.h b/include/errno.h
index 7df41df..45c3275 100644
--- a/include/errno.h
+++ b/include/errno.h
@@ -28,7 +28,11 @@ extern int rtld_errno attribute_hidden;
 
 #  undef  errno
 #  if IS_IN (libc)
+#ifndef LIBCOMPATCOLL_MODE
 #   define errno __libc_errno
+#else
+#   define errno errno
+#endif /* LIBCOMPATCOLL_MODE */
 #  else
 #   define errno errno		/* For #ifndef errno tests.  */
 #  endif
@@ -44,7 +48,9 @@ extern int *__errno_location (void) __THROW __attribute__ ((__const__))
      attribute_hidden
 #  endif
 ;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__errno_location)
+#endif /* LIBCOMPATCOLL_MODE */
 # endif
 
 #endif /* _ERRNO_H */
diff --git a/include/libc-symbols.h b/include/libc-symbols.h
index c555bf2..211430c 100644
--- a/include/libc-symbols.h
+++ b/include/libc-symbols.h
@@ -582,7 +582,7 @@ for linking")
 # define hidden_nolink(name, lib, version)
 #endif
 
-#if IS_IN (libc)
+#if IS_IN (libc) && !defined LIBCOMPATCOLL_MODE
 # define libc_hidden_proto(name, attrs...) hidden_proto (name, ##attrs)
 # define libc_hidden_def(name) hidden_def (name)
 # define libc_hidden_weak(name) hidden_weak (name)
diff --git a/include/signal.h b/include/signal.h
index d9f279c..01ac394 100644
--- a/include/signal.h
+++ b/include/signal.h
@@ -11,7 +11,9 @@ libc_hidden_proto (sigaddset)
 libc_hidden_proto (sigdelset)
 libc_hidden_proto (sigismember)
 libc_hidden_proto (__sigpause)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (raise)
+#endif /* LIBCOMPATCOLL_MODE */
 libc_hidden_proto (__libc_current_sigrtmin)
 libc_hidden_proto (__libc_current_sigrtmax)
 libc_hidden_proto (_sys_siglist)
diff --git a/include/stdio.h b/include/stdio.h
index cc1908e..edaf1ec 100644
--- a/include/stdio.h
+++ b/include/stdio.h
@@ -116,6 +116,7 @@ extern int __fxprintf (FILE *__fp, const char *__fmt, ...)
 extern const char *const _sys_errlist_internal[] attribute_hidden;
 extern int _sys_nerr_internal attribute_hidden;
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__asprintf)
 #  if IS_IN (libc)
 extern _IO_FILE *_IO_new_fopen (const char*, const char*);
@@ -132,7 +133,9 @@ extern int _IO_new_fsetpos (_IO_FILE *, const _IO_fpos_t *);
 extern int _IO_new_fgetpos (_IO_FILE *, _IO_fpos_t *);
 #   define fgetpos(fp, posp) _IO_new_fgetpos (fp, posp)
 #  endif
+#endif /* LIBCOMPATCOLL_MODE */
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (dprintf)
 libc_hidden_proto (fprintf)
 libc_hidden_proto (vfprintf)
@@ -151,7 +154,9 @@ libc_hidden_proto (fflush_unlocked)
 libc_hidden_proto (fread_unlocked)
 libc_hidden_proto (fwrite_unlocked)
 libc_hidden_proto (fgets_unlocked)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (fgets_unlocked) __fgets_unlocked;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__fgets_unlocked)
 libc_hidden_proto (fputs_unlocked)
 libc_hidden_proto (fmemopen)
@@ -163,6 +168,7 @@ libc_hidden_proto (__vfprintf_chk)
 libc_hidden_proto (__vasprintf_chk)
 libc_hidden_proto (__vdprintf_chk)
 libc_hidden_proto (__obstack_vprintf_chk)
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* The <stdio.h> header does not include the declaration for gets
    anymore when compiling with _GNU_SOURCE.  Provide a copy here.  */
diff --git a/include/stdlib.h b/include/stdlib.h
index edec46f..efe9664 100644
--- a/include/stdlib.h
+++ b/include/stdlib.h
@@ -22,6 +22,7 @@ extern __typeof (strtoull_l) __strtoull_l;
 extern __typeof (strtod_l) __strtod_l;
 extern __typeof (strtof_l) __strtof_l;
 extern __typeof (strtold_l) __strtold_l;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strtol_l)
 libc_hidden_proto (__strtoul_l)
 libc_hidden_proto (__strtoll_l)
@@ -33,12 +34,15 @@ libc_hidden_proto (__strtold_l)
 libc_hidden_proto (exit)
 libc_hidden_proto (abort)
 libc_hidden_proto (getenv)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (secure_getenv) __libc_secure_getenv;
 libc_hidden_proto (__libc_secure_getenv)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (bsearch)
 libc_hidden_proto (qsort)
 extern __typeof (qsort_r) __qsort_r;
 libc_hidden_proto (__qsort_r)
+#endif /* LIBCOMPATCOLL_MODE */
 libc_hidden_proto (lrand48_r)
 libc_hidden_proto (wctomb)
 
@@ -140,6 +144,7 @@ extern unsigned long long int __strtoull_internal (const char *
 						   char **__restrict __endptr,
 						   int __base, int __group)
      __THROW __nonnull ((1)) __wur;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strtof_internal)
 libc_hidden_proto (__strtod_internal)
 libc_hidden_proto (__strtold_internal)
@@ -147,6 +152,7 @@ libc_hidden_proto (__strtol_internal)
 libc_hidden_proto (__strtoll_internal)
 libc_hidden_proto (__strtoul_internal)
 libc_hidden_proto (__strtoull_internal)
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern double ____strtod_l_internal (const char *__restrict __nptr,
 				     char **__restrict __endptr, int __group,
@@ -179,6 +185,7 @@ extern unsigned long long int ____strtoull_l_internal (const char *
 						       int __base, int __group,
 						       __locale_t __loc);
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (____strtof_l_internal)
 libc_hidden_proto (____strtod_l_internal)
 libc_hidden_proto (____strtold_l_internal)
@@ -194,7 +201,8 @@ libc_hidden_proto (strtol)
 libc_hidden_proto (strtoll)
 libc_hidden_proto (strtoul)
 libc_hidden_proto (strtoull)
-
+#endif /* LIBCOMPATCOLL_MODE */
+	
 extern float __strtof_nan (const char *, char **, char) internal_function;
 extern double __strtod_nan (const char *, char **, char) internal_function;
 extern long double __strtold_nan (const char *, char **, char)
@@ -206,12 +214,14 @@ extern double __wcstod_nan (const wchar_t *, wchar_t **, wchar_t)
 extern long double __wcstold_nan (const wchar_t *, wchar_t **, wchar_t)
      internal_function;
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strtof_nan)
 libc_hidden_proto (__strtod_nan)
 libc_hidden_proto (__strtold_nan)
 libc_hidden_proto (__wcstof_nan)
 libc_hidden_proto (__wcstod_nan)
 libc_hidden_proto (__wcstold_nan)
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern char *__ecvt (double __value, int __ndigit, int *__restrict __decpt,
 		     int *__restrict __sign);
@@ -244,7 +254,9 @@ extern int __qfcvt_r (long double __value, int __ndigit,
 # endif
 
 extern void *__default_morecore (ptrdiff_t) __THROW;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__default_morecore)
+#endif /* LIBCOMPATCOLL_MODE */
 
 struct abort_msg_s
 {
@@ -252,7 +264,9 @@ struct abort_msg_s
   char msg[0];
 };
 extern struct abort_msg_s *__abort_msg;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__abort_msg)
+#endif /* LIBCOMPATCOLL_MODE */
 
 __END_DECLS
 
diff --git a/include/string.h b/include/string.h
index 33c07a5..3bfda47 100644
--- a/include/string.h
+++ b/include/string.h
@@ -59,6 +59,7 @@ extern __typeof (strncasecmp_l) __strncasecmp_l;
 /* Alternative version which doesn't pollute glibc's namespace.  */
 #if IS_IN (libc)
 # undef strndupa
+#ifndef LIBCOMPATCOLL_MODE
 # define strndupa(s, n)							      \
   (__extension__							      \
     ({									      \
@@ -68,8 +69,20 @@ extern __typeof (strncasecmp_l) __strncasecmp_l;
       __new[__len] = '\0';						      \
       (char *) memcpy (__new, __old, __len);				      \
     }))
-#endif
+#else
+# define strndupa(s, n)							      \
+  (__extension__							      \
+    ({									      \
+      const char *__old = (s);						      \
+      size_t __len = strnlen (__old, (n));				      \
+      char *__new = (char *) __builtin_alloca (__len + 1);		      \
+      __new[__len] = '\0';						      \
+      (char *) memcpy (__new, __old, __len);				      \
+    }))
+#endif /* LIBCOMPATCOLL_MODE */
+#endif /* IS_IN (libc) */
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__mempcpy)
 libc_hidden_proto (__stpcpy)
 libc_hidden_proto (__stpncpy)
@@ -86,11 +99,15 @@ libc_hidden_proto (strcoll)
 libc_hidden_proto (__strcoll_l)
 libc_hidden_proto (__strxfrm_l)
 libc_hidden_proto (__strtok_r)
+#endif /* LIBCOMPATCOLL_MODE */
 extern char *__strsep_g (char **__stringp, const char *__delim);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strsep_g)
 libc_hidden_proto (strnlen)
 libc_hidden_proto (memmem)
+#endif /* LIBCOMPATCOLL_MODE */
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_builtin_proto (memchr)
 libc_hidden_builtin_proto (memcpy)
 libc_hidden_builtin_proto (mempcpy)
@@ -111,6 +128,7 @@ libc_hidden_builtin_proto (strrchr)
 libc_hidden_builtin_proto (strspn)
 libc_hidden_builtin_proto (strstr)
 libc_hidden_builtin_proto (ffs)
+#endif /* LIBCOMPATCOLL_MODE */
 
 # ifndef _ISOMAC
 #  ifndef index
diff --git a/include/sys/stat.h b/include/sys/stat.h
index 873562a..4623c1a 100644
--- a/include/sys/stat.h
+++ b/include/sys/stat.h
@@ -14,7 +14,9 @@ extern int __mknod (const char *__path,
 		    __mode_t __mode, __dev_t __dev);
 #if IS_IN (libc) || IS_IN (rtld)
 hidden_proto (__fxstat)
+#ifndef LIBCOMPATCOLL_MODE
 hidden_proto (__fxstat64)
+#endif /* LIBCOMPATCOLL_MODE */
 hidden_proto (__lxstat)
 hidden_proto (__lxstat64)
 hidden_proto (__xstat)
diff --git a/include/time.h b/include/time.h
index 8dd10dc..9ebbde7 100644
--- a/include/time.h
+++ b/include/time.h
@@ -8,16 +8,24 @@
 __BEGIN_DECLS
 
 extern __typeof (strftime_l) __strftime_l;
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__strftime_l)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __typeof (strptime_l) __strptime_l;
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (time)
+#endif /* LIBCOMPATCOLL_MODE */
 libc_hidden_proto (asctime)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (mktime)
 libc_hidden_proto (timelocal)
 libc_hidden_proto (localtime)
+#endif /* LIBCOMPATCOLL_MODE */
 libc_hidden_proto (strftime)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (strptime)
+#endif /* LIBCOMPATCOLL_MODE */
 
 extern __typeof (clock_getres) __clock_getres;
 extern __typeof (clock_gettime) __clock_gettime;
@@ -62,8 +70,14 @@ extern time_t __mktime_internal (struct tm *__tp,
 				 struct tm *(*__func) (const time_t *,
 						       struct tm *),
 				 time_t *__offset);
+#ifndef LIBCOMPATCOLL_MODE
 extern struct tm *__localtime_r (const time_t *__timer,
 				 struct tm *__tp) attribute_hidden;
+#else
+extern struct tm *__localtime_r (const time_t *__timer,
+                                 struct tm *__tp);
+#endif /* LIBCOMPATCOLL_MODE */
+
 
 extern struct tm *__gmtime_r (const time_t *__restrict __timer,
 			      struct tm *__restrict __tp);
diff --git a/include/unistd.h b/include/unistd.h
index b958020..48d2509 100644
--- a/include/unistd.h
+++ b/include/unistd.h
@@ -4,7 +4,9 @@
 # ifndef _ISOMAC
 __BEGIN_DECLS
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (_exit, __noreturn__)
+#endif /* LIBCOMPATCOLL_MODE */
 libc_hidden_proto (alarm)
 libc_hidden_proto (confstr)
 libc_hidden_proto (execl)
@@ -87,7 +89,9 @@ extern int __execve (const char *__path, char *const __argv[],
 extern long int __pathconf (const char *__path, int __name);
 extern long int __fpathconf (int __fd, int __name);
 extern long int __sysconf (int __name);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__sysconf)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __pid_t __getpid (void);
 libc_hidden_proto (__getpid)
 extern __pid_t __getppid (void);
@@ -130,9 +134,13 @@ extern int __close (int __fd);
 libc_hidden_proto (__close)
 extern int __libc_close (int __fd);
 extern ssize_t __read (int __fd, void *__buf, size_t __nbytes);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__read)
+#endif /* LIBCOMPATCOLL_MODE */
 extern ssize_t __write (int __fd, const void *__buf, size_t __n);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__write)
+#endif /* LIBCOMPATCOLL_MODE */
 extern __pid_t __fork (void);
 libc_hidden_proto (__fork)
 extern int __getpagesize (void) __attribute__ ((__const__));
diff --git a/include/wchar.h b/include/wchar.h
index 4997737..f387f62 100644
--- a/include/wchar.h
+++ b/include/wchar.h
@@ -55,6 +55,7 @@ extern unsigned long long int __wcstoull_internal (const wchar_t *
 extern unsigned long long int ____wcstoull_l_internal (const wchar_t *,
 						       wchar_t **, int, int,
 						       __locale_t);
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_proto (__wcstof_internal)
 libc_hidden_proto (__wcstod_internal)
 libc_hidden_proto (__wcstold_internal)
@@ -69,6 +70,7 @@ libc_hidden_proto (wcstol)
 libc_hidden_proto (wcstoll)
 libc_hidden_proto (wcstoul)
 libc_hidden_proto (wcstoull)
+#endif /* LIBCOMPATCOLL_MODE */
 
 libc_hidden_proto (__wcscasecmp_l)
 libc_hidden_proto (__wcsncasecmp_l)
diff --git a/intl/dcigettext.c b/intl/dcigettext.c
index 02eb8ad..02b23d1 100644
--- a/intl/dcigettext.c
+++ b/intl/dcigettext.c
@@ -17,6 +17,15 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __tfind(a,b,c)          tfind(a,b,c)
+#define __tdestroy(a,b)		tdestroy(a,b)
+#define __getcwd(a,b)           getcwd(a,b)
+int __libc_enable_secure = 1;
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 /* Tell glibc's <string.h> to provide a prototype for mempcpy().
    This must come before <config.h> because <config.h> may include
    <features.h>, and once <features.h> has been included, it's too late.  */
@@ -31,7 +40,9 @@
 #include <sys/types.h>
 
 #ifdef __GNUC__
+#ifndef LIBCOMPATCOLL_MODE
 # define alloca __builtin_alloca
+#endif /* LIBCOMPATCOLL_MODE */
 # define HAVE_ALLOCA 1
 #else
 # if defined HAVE_ALLOCA_H || defined _LIBC
@@ -116,6 +127,7 @@ extern int errno;
 
 /* @@ end of prolog @@ */
 
+#ifndef LIBCOMPATCOLL_MODE
 #ifdef _LIBC
 /* Rename the non ANSI C functions.  This is required by the standard
    because some ANSI C functions will require linking with this object
@@ -139,6 +151,7 @@ static char *stpcpy PARAMS ((char *dest, const char *src));
 static void *mempcpy PARAMS ((void *dest, const void *src, size_t n));
 # endif
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* Amount to increase buffer size by in each try.  */
 #define PATH_INCR 32
@@ -218,9 +231,11 @@ struct known_translation_t
 
 static void *root;
 
+#ifndef LIBCOMPATCOLL_MODE
 # ifdef _LIBC
 #  define tsearch __tsearch
 # endif
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* Function to compare two entries in the table of known translations.  */
 static int transcmp PARAMS ((const void *p1, const void *p2));
diff --git a/intl/loadmsgcat.c b/intl/loadmsgcat.c
index 8ee719d..31e32bc 100644
--- a/intl/loadmsgcat.c
+++ b/intl/loadmsgcat.c
@@ -92,6 +92,12 @@ char *alloca ();
 # define PRI_MACROS_BROKEN 0
 #endif
 
+#ifdef LIBCOMPATCOLL_MODE
+#undef open_not_cancel
+#define open_not_cancel(name, flags, mode) \
+   INLINE_SYSCALL (open, 3, (const char *) (name), (flags), (mode))
+#endif /* LIBCOMPATCOLL_MODE */
+
 /* Provide fallback values for macros that ought to be defined in <inttypes.h>.
    Note that our fallback values need not be literal strings, because we don't
    use them with preprocessor string concatenation.  */
@@ -452,6 +458,7 @@ char *alloca ();
 
 /* @@ end of prolog @@ */
 
+#ifndef LIBCOMPATCOLL_MODE
 #ifdef _LIBC
 /* Rename the non ISO C functions.  This is required by the standard
    because some ISO C functions will require linking with this object
@@ -463,6 +470,7 @@ char *alloca ();
   __mmap (addr, len, prot, flags, fd, offset)
 # define munmap(addr, len)	__munmap (addr, len)
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* For those losing systems which don't have `alloca' we have to add
    some additional code emulating it.  */
diff --git a/locale/findlocale.c b/locale/findlocale.c
index 104f24c..3e845f7 100644
--- a/locale/findlocale.c
+++ b/locale/findlocale.c
@@ -16,6 +16,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __memmem(a,b,c,d)	memmem(a,b,c,d)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <errno.h>
 #include <locale.h>
diff --git a/locale/loadarchive.c b/locale/loadarchive.c
index 3110c9b..7986bf4 100644
--- a/locale/loadarchive.c
+++ b/locale/loadarchive.c
@@ -16,6 +16,15 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __mmap64(a,b,c,d,e,f)	mmap64(a,b,c,d,e,f)
+#define __munmap(a,b)		munmap(a,b)
+#define __sysconf(a)		sysconf(a)
+#define __strchrnul(a,b)	strchrnul(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <locale.h>
 #include <stddef.h>
 #include <stdlib.h>
@@ -33,6 +42,12 @@
 #include "locarchive.h"
 #include <not-cancel.h>
 
+#ifdef LIBCOMPATCOLL_MODE
+#undef open_not_cancel_2
+#define open_not_cancel_2(name, flags) \
+   INLINE_SYSCALL (open, 2, (const char *) (name), (flags))
+#endif /* LIBCOMPATCOLL_MODE */
+
 /* Define the hash function.  We define the function as static inline.  */
 #define compute_hashval static inline compute_hashval
 #define hashval_t uint32_t
diff --git a/locale/loadlocale.c b/locale/loadlocale.c
index 9fd9216..01e5976 100644
--- a/locale/loadlocale.c
+++ b/locale/loadlocale.c
@@ -17,6 +17,13 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __mmap(a,b,c,d,e,f)             mmap(a,b,c,d,e,f)
+#define __munmap(a,b)                   munmap(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <errno.h>
 #include <fcntl.h>
@@ -32,6 +39,17 @@
 #include <not-cancel.h>
 #include "localeinfo.h"
 
+#ifdef LIBCOMPATCOLL_MODE
+#undef open_not_cancel
+#define open_not_cancel(name, flags, mode) \
+   INLINE_SYSCALL (open, 3, (const char *) (name), (flags), (mode))
+#undef open_not_cancel_2
+#define open_not_cancel_2(name, flags) \
+   INLINE_SYSCALL (open, 2, (const char *) (name), (flags))
+#undef read_not_cancel
+#define read_not_cancel(fd, buf, n) \
+  INLINE_SYSCALL (read, 3, (fd), (buf), (n))
+#endif /* LIBCOMPATCOLL_MODE */
 
 static const size_t _nl_category_num_items[] =
 {
diff --git a/locale/localeconv.c b/locale/localeconv.c
index 157a314..9de908b 100644
--- a/locale/localeconv.c
+++ b/locale/localeconv.c
@@ -67,8 +67,12 @@ __localeconv (void)
   return &result;
 }
 
+#ifdef LIBCOMPATCOLL_MODE
+weak_alias (__localeconv, localeconv)
+#else
 versioned_symbol (libc, __localeconv, localeconv, GLIBC_2_2);
 #if SHLIB_COMPAT (libc, GLIBC_2_0, GLIBC_2_2)
 strong_alias (__localeconv, __localeconv20)
 compat_symbol (libc, __localeconv20, localeconv, GLIBC_2_0);
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/locale/newlocale.c b/locale/newlocale.c
index 8fd4024..eea5cb3 100644
--- a/locale/newlocale.c
+++ b/locale/newlocale.c
@@ -103,7 +103,11 @@ __newlocale (int category_mask, const char *locale, __locale_t base)
   locale_path = NULL;
   locale_path_len = 0;
 
+#ifndef LIBCOMPATCOLL_MODE  
   locpath_var = getenv ("LOCPATH");
+#else
+  locpath_var = getenv ("COMPAT_LOCPATH");
+#endif /* LIBCOMPATCOLL_MODE */
   if (locpath_var != NULL && locpath_var[0] != '\0')
     {
       if (__argz_create_sep (locpath_var, ':',
diff --git a/locale/setlocale.c b/locale/setlocale.c
index 46f0052..3d59ccd 100644
--- a/locale/setlocale.c
+++ b/locale/setlocale.c
@@ -252,7 +252,11 @@ setlocale (int category, const char *locale)
   locale_path = NULL;
   locale_path_len = 0;
 
+#ifndef LIBCOMPATCOLL_MODE
   locpath_var = getenv ("LOCPATH");
+#else
+  locpath_var = getenv ("COMPAT_LOCPATH");
+#endif /* LIBCOMPATCOLL_MODE */
   if (locpath_var != NULL && locpath_var[0] != '\0')
     {
       if (__argz_create_sep (locpath_var, ':',
diff --git a/stdlib/strtod.c b/stdlib/strtod.c
index 657d95d..3be31c4 100644
--- a/stdlib/strtod.c
+++ b/stdlib/strtod.c
@@ -51,7 +51,9 @@ INTERNAL (STRTOF) (const STRING_TYPE *nptr, STRING_TYPE **endptr, int group)
   return INTERNAL(STRTOF_L) (nptr, endptr, group, _NL_CURRENT_LOCALE);
 }
 #if defined _LIBC
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (INTERNAL (STRTOF))
+#endif /* LIBCOMPATCOLL_MODE */
 #endif
 
 
@@ -64,7 +66,9 @@ STRTOF (const STRING_TYPE *nptr, STRING_TYPE **endptr)
   return INTERNAL(STRTOF_L) (nptr, endptr, 0, _NL_CURRENT_LOCALE);
 }
 #if defined _LIBC
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (STRTOF)
+#endif /* LIBCOMPATCOLL_MODE */
 #endif
 
 #ifdef LONG_DOUBLE_COMPAT
diff --git a/stdlib/strtod_l.c b/stdlib/strtod_l.c
index bfbe9b4..c8838e2 100644
--- a/stdlib/strtod_l.c
+++ b/stdlib/strtod_l.c
@@ -1729,7 +1729,9 @@ ____STRTOF_INTERNAL (const STRING_TYPE *nptr, STRING_TYPE **endptr, int group,
   /* NOTREACHED */
 }
 #if defined _LIBC && !defined USE_WIDE_CHAR
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (____STRTOF_INTERNAL)
+#endif /* LIBCOMPATCOLL_MODE */
 #endif
 
 /* External user entry point.  */
@@ -1742,10 +1744,12 @@ __STRTOF (const STRING_TYPE *nptr, STRING_TYPE **endptr, __locale_t loc)
 {
   return ____STRTOF_INTERNAL (nptr, endptr, 0, loc);
 }
+#ifndef LIBCOMPATCOLL_MODE
 #if defined _LIBC
 libc_hidden_def (__STRTOF)
 libc_hidden_ver (__STRTOF, STRTOF)
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
 weak_alias (__STRTOF, STRTOF)
 
 #ifdef LONG_DOUBLE_COMPAT
diff --git a/stdlib/strtod_nan_main.c b/stdlib/strtod_nan_main.c
index bc37a63..1f73b29 100644
--- a/stdlib/strtod_nan_main.c
+++ b/stdlib/strtod_nan_main.c
@@ -60,4 +60,6 @@ STRTOD_NAN (const STRING_TYPE *str, STRING_TYPE **endptr, STRING_TYPE endc)
     *endptr = (STRING_TYPE *) cp;
   return retval;
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (STRTOD_NAN)
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/string/argz-stringify.c b/string/argz-stringify.c
index 5b8582e..e2cda5c 100644
--- a/string/argz-stringify.c
+++ b/string/argz-stringify.c
@@ -17,6 +17,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __strnlen(a,n)		strnlen(a,n)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <argz.h>
 #include <string.h>
 
diff --git a/string/strcoll.c b/string/strcoll.c
index 80a62f3..fa7237b 100644
--- a/string/strcoll.c
+++ b/string/strcoll.c
@@ -34,6 +34,8 @@ STRCOLL (const STRING_TYPE *s1, const STRING_TYPE *s2)
   return STRCOLL_L (s1, s2, _NL_CURRENT_LOCALE);
 }
 
+#ifndef LIBCOMPATCOLL_MODE
 #ifdef USE_HIDDEN_DEF
 libc_hidden_def (STRCOLL)
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/string/strcoll_l.c b/string/strcoll_l.c
index 966523e..d9b2703 100644
--- a/string/strcoll_l.c
+++ b/string/strcoll_l.c
@@ -16,6 +16,11 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wcslen(s)             wcslen(s)
+
+#endif /* LIBCOMPATCOLL_MODE */
 
 #include <assert.h>
 #include <langinfo.h>
@@ -637,7 +642,9 @@ STRCOLL (const STRING_TYPE *s1, const STRING_TYPE *s2, __locale_t l)
 
   return result;
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (STRCOLL)
+#endif /* LIBCOMPATCOLL_MODE */
 
 #ifndef WIDE_CHAR_VERSION
 weak_alias (__strcoll_l, strcoll_l)
diff --git a/string/strxfrm_l.c b/string/strxfrm_l.c
index ebc67be..e89be84 100644
--- a/string/strxfrm_l.c
+++ b/string/strxfrm_l.c
@@ -17,6 +17,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wcslen(s)             wcslen(s)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <langinfo.h>
 #include <locale.h>
@@ -443,7 +449,9 @@ STRXFRM (STRING_TYPE *dest, const STRING_TYPE *src, size_t n, __locale_t l)
      byte/word at the end.  */
   return needed - 1;
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (STRXFRM)
+#endif /* LIBCOMPATCOLL_MODE */
 
 #ifndef WIDE_CHAR_VERSION
 weak_alias (__strxfrm_l, strxfrm_l)
diff --git a/sysdeps/generic/symbol-hacks.h b/sysdeps/generic/symbol-hacks.h
index ce576c9..796a030 100644
--- a/sysdeps/generic/symbol-hacks.h
+++ b/sysdeps/generic/symbol-hacks.h
@@ -1,7 +1,9 @@
 /* Some compiler optimizations may transform loops into memset/memmove
    calls and without proper declaration it may generate PLT calls.  */
 #if !defined __ASSEMBLER__ && IS_IN (libc) && defined SHARED
+#ifndef LIBCOMPATCOLL_MODE
 asm ("memmove = __GI_memmove");
 asm ("memset = __GI_memset");
 asm ("memcpy = __GI_memcpy");
+#endif /* LIBCOMPATCOLL_MODE */
 #endif
diff --git a/sysdeps/generic/unsecvars.h b/sysdeps/generic/unsecvars.h
index 358dfb3..44c6c24 100644
--- a/sysdeps/generic/unsecvars.h
+++ b/sysdeps/generic/unsecvars.h
@@ -3,6 +3,7 @@
    with a '\0' explicitly.  */
 #define UNSECURE_ENVVARS \
   "GCONV_PATH\0"							      \
+  "COMPAT_GCONV_PATH\0"							      \
   "GETCONF_DIR\0"							      \
   "HOSTALIASES\0"							      \
   "LD_AUDIT\0"								      \
@@ -18,6 +19,7 @@
   "LD_USE_LOAD_BIAS\0"							      \
   "LOCALDOMAIN\0"							      \
   "LOCPATH\0"								      \
+  "COMPAT_LOCPATH\0"                                                          \
   "MALLOC_TRACE\0"							      \
   "NIS_PATH\0"								      \
   "NLSPATH\0"								      \
diff --git a/time/alt_digit.c b/time/alt_digit.c
index 75a4c34..942fe34 100644
--- a/time/alt_digit.c
+++ b/time/alt_digit.c
@@ -16,6 +16,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wcschr(a,b)		wcschr(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include "../locale/localeinfo.h"
 #include <bits/libc-lock.h>
 #include <stdlib.h>
diff --git a/time/asctime.c b/time/asctime.c
index fa1b48b..868fe10 100644
--- a/time/asctime.c
+++ b/time/asctime.c
@@ -16,6 +16,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __snprintf(s,n,f,...)		snprintf(s,n,f,__VA_ARGS__)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include "../locale/localeinfo.h"
 #include <errno.h>
 #include <limits.h>
diff --git a/time/ctime_r.c b/time/ctime_r.c
index 217c07b..e42005d 100644
--- a/time/ctime_r.c
+++ b/time/ctime_r.c
@@ -17,6 +17,13 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __localtime_r(t,r)              localtime_r(t,r)
+#define __asctime_r(t,b)		asctime_r(t,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <time.h>
 
 /* Return a string as returned by asctime which is the representation
diff --git a/time/era.c b/time/era.c
index e37926e..fbed211 100644
--- a/time/era.c
+++ b/time/era.c
@@ -16,6 +16,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wcschr(a,b)           wcschr(a,b)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include "../locale/localeinfo.h"
 #include <bits/libc-lock.h>
 #include <stdlib.h>
diff --git a/time/strftime_l.c b/time/strftime_l.c
index 39d3489..b0c9ab5 100644
--- a/time/strftime_l.c
+++ b/time/strftime_l.c
@@ -15,6 +15,13 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wmemcpy(d,s,n)	wmemcpy(d,s,n)
+#define __wcslen(s)		wcslen(s)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #ifdef HAVE_CONFIG_H
 # include <config.h>
 #endif
@@ -154,11 +161,12 @@ extern char *tzname[];
   ((year) % 4 == 0 && ((year) % 100 != 0 || (year) % 400 == 0))
 #endif
 
-
+#ifndef LIBCOMPATCOLL_MODE
 #ifdef _LIBC
 # define tzname __tzname
 # define tzset __tzset
 #endif
+#endif /* LIBCOMPATCOLL_MODE */
 
 #if !HAVE_TM_GMTOFF
 /* Portable standalone applications should supply a "time_r.h" that
@@ -460,7 +468,9 @@ my_strftime (CHAR_T *s, size_t maxsize, const CHAR_T *format,
 			      ut_argument LOCALE_ARG);
 }
 #ifdef _LIBC
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (my_strftime)
+#endif /* LIBCOMPATCOLL_MODE */
 #endif
 
 static size_t
diff --git a/time/strptime.c b/time/strptime.c
index ef00807..1fe05cf 100644
--- a/time/strptime.c
+++ b/time/strptime.c
@@ -32,4 +32,6 @@ strptime (const char *buf, const char *format, struct tm *tm)
 {
   return __strptime_internal (buf, format, tm, NULL, _NL_CURRENT_LOCALE);
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (strptime)
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/time/strptime_l.c b/time/strptime_l.c
index 7f1efa1..ae9e8fe 100644
--- a/time/strptime_l.c
+++ b/time/strptime_l.c
@@ -15,6 +15,22 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+/* How many days come before each month (0-12).  */
+#ifndef _LIBC
+static
+#endif 
+const unsigned short int __mon_yday[2][13] =
+  {     
+    /* Normal years.  */
+    { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 },
+    /* Leap years.  */
+    { 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 }
+  };
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #ifdef HAVE_CONFIG_H
 # include <config.h>
 #endif
@@ -35,7 +51,9 @@
 
 #if ! HAVE_LOCALTIME_R && ! defined localtime_r
 # ifdef _LIBC
+#ifndef LIBCOMPATCOLL_MODE
 #  define localtime_r __localtime_r
+#endif /* LIBCOMPATCOLL_MODE */
 # else
 /* Approximate localtime_r as best we can in its absence.  */
 #  define localtime_r my_localtime_r
diff --git a/time/wcsftime.c b/time/wcsftime.c
index be0a48a..bd1af53 100644
--- a/time/wcsftime.c
+++ b/time/wcsftime.c
@@ -26,4 +26,6 @@ wcsftime (wchar_t *s, size_t maxsize, const wchar_t *format,
 {
   return __wcsftime_l (s, maxsize, format, tp, _NL_CURRENT_LOCALE);
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (wcsftime)
+#endif /* LIBCOMPATCOLL_MODE */
diff --git a/wcsmbs/mbrlen.c b/wcsmbs/mbrlen.c
index 4e6b6de..67f590f 100644
--- a/wcsmbs/mbrlen.c
+++ b/wcsmbs/mbrlen.c
@@ -28,5 +28,7 @@ __mbrlen (const char *s, size_t n, mbstate_t *ps)
 {
   return __mbrtowc (NULL, s, n, ps ?: &internal);
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__mbrlen)
+#endif /* LIBCOMPATCOLL_MODE */
 weak_alias (__mbrlen, mbrlen)
diff --git a/wcsmbs/mbrtowc.c b/wcsmbs/mbrtowc.c
index d29c2df..6b549b9 100644
--- a/wcsmbs/mbrtowc.c
+++ b/wcsmbs/mbrtowc.c
@@ -118,9 +118,13 @@ __mbrtowc (wchar_t *pwc, const char *s, size_t n, mbstate_t *ps)
 
   return result;
 }
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__mbrtowc)
+#endif /* LIBCOMPATCOLL_MODE */
 weak_alias (__mbrtowc, mbrtowc)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_weak (mbrtowc)
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* There should be no difference between the UTF-32 handling required
    by mbrtoc32 and the wchar_t handling which has long since been
diff --git a/wcsmbs/mbsrtowcs_l.c b/wcsmbs/mbsrtowcs_l.c
index ec8b7be..96d8d8c 100644
--- a/wcsmbs/mbsrtowcs_l.c
+++ b/wcsmbs/mbsrtowcs_l.c
@@ -16,6 +16,12 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __strnlen(s,n)		strnlen(s,n)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <ctype.h>
 #include <string.h>
diff --git a/wcsmbs/wcrtomb.c b/wcsmbs/wcrtomb.c
index 12e6a89..b1e72d9 100644
--- a/wcsmbs/wcrtomb.c
+++ b/wcsmbs/wcrtomb.c
@@ -114,7 +114,9 @@ __wcrtomb (char *s, wchar_t wc, mbstate_t *ps)
   return result;
 }
 weak_alias (__wcrtomb, wcrtomb)
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_weak (wcrtomb)
+#endif /* LIBCOMPATCOLL_MODE */
 
 /* There should be no difference between the UTF-32 handling required
    by c32rtomb and the wchar_t handling which has long since been
diff --git a/wcsmbs/wcscasecmp_l.c b/wcsmbs/wcscasecmp_l.c
index e687915..390c2a0 100644
--- a/wcsmbs/wcscasecmp_l.c
+++ b/wcsmbs/wcscasecmp_l.c
@@ -19,5 +19,7 @@
 #define USE_IN_EXTENDED_LOCALE_MODEL	1
 #include <wcscasecmp.c>
 
+#ifndef LIBCOMPATCOLL_MODE
 libc_hidden_def (__wcscasecmp_l)
+#endif /* LIBCOMPATCOLL_MODE */
 weak_alias (__wcscasecmp_l, wcscasecmp_l)
diff --git a/wcsmbs/wcsrtombs.c b/wcsmbs/wcsrtombs.c
index ab843f6..7d71598 100644
--- a/wcsmbs/wcsrtombs.c
+++ b/wcsmbs/wcsrtombs.c
@@ -16,6 +16,13 @@
    License along with the GNU C Library; if not, see
    <http://www.gnu.org/licenses/>.  */
 
+#ifdef LIBCOMPATCOLL_MODE
+
+#define __wcslen(s)             wcslen(s)
+#define __wcsnlen(s,n)             wcsnlen(s,n)
+
+#endif /* LIBCOMPATCOLL_MODE */
+
 #include <assert.h>
 #include <dlfcn.h>
 #include <errno.h>
