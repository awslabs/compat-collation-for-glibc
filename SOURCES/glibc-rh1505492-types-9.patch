commit 9d96909913249f7b1ff9f503f8fa8abc458089a9
Author: Adhemerval Zanella <azanella@linux.vnet.ibm.com>
Date:   Thu Dec 11 07:17:11 2014 -0500

    powerpc: Fix lgammal_r overflow warnings
    
    ldbl-128ibm uses ldbl-128 e_lgammal_r implementation as is, however some
    constants definitions overflows for IBM long double range.  This patch
    suppress the compiler warnings until the ldbl-128ibm implementation is
    fixed.

diff --git a/sysdeps/ieee754/ldbl-128/e_lgammal_r.c b/sysdeps/ieee754/ldbl-128/e_lgammal_r.c
index 2b44afb759695f11..39c38b4b6bf1daad 100644
--- a/sysdeps/ieee754/ldbl-128/e_lgammal_r.c
+++ b/sysdeps/ieee754/ldbl-128/e_lgammal_r.c
@@ -70,12 +70,20 @@
 
 #include <math.h>
 #include <math_private.h>
+#include <libc-internal.h>
+#include <float.h>
 
+/* BZ#16347: ldbl-128ibm uses this file as is, however the MAXLGM
+   definition overflows for IBM long double.  This directive prevents the
+   overflow warnings until IBM long double version is fixed.  */
 static const long double PIL = 3.1415926535897932384626433832795028841972E0L;
+DIAG_PUSH_NEEDS_COMMENT;
+DIAG_IGNORE_NEEDS_COMMENT (4.6, "-Woverflow");
 static const long double MAXLGM = 1.0485738685148938358098967157129705071571E4928L;
+DIAG_POP_NEEDS_COMMENT;
 static const long double one = 1.0L;
 static const long double zero = 0.0L;
-static const long double huge = 1.0e4000L;
+static const long double huge = LDBL_MAX;
 
 /* log gamma(x) = ( x - 0.5 ) * log(x) - x + LS2PI + 1/x P(1/x^2)
    1/x <= 0.0741 (x >= 13.495...)
